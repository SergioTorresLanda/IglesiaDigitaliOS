//
//  CreatePostViewController.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Diego Martinez on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Photos
import SDWebImage
import RealmSwift

public struct LocationsResult {
    let id: String
    let name: String
    let direction: String
    let coordinates: CLLocationCoordinate2D
    let image: UIImage?
}

public struct FeelingsResult {
    let id: Int
    let feeling: String
    let image: String
}

public struct MediaData {
    var image: UIImage
    let videoURL: URL?
}

public class MediaTemp {
    static var shared = MediaTemp()
    var temp = [MediaData]()
}

public class CreatePostViewController: UIViewController, CreatePostViewProtocol {

	var presenter: CreatePostPresenterProtocol?
    
    //MARK: - @IBoutlets
    @IBOutlet public weak var loadingView: UIView!
    @IBOutlet public weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet public weak var containerView: UIView!
    @IBOutlet public weak var nameLabel: UILabel!
    @IBOutlet public weak var textView: FlexibleTextView!
    @IBOutlet public weak var addMoreView: UIView!
    @IBOutlet public weak var addMoreViewBigView: UIView!
    @IBOutlet public weak var addMoreViewPanIndicator: UIView!
    @IBOutlet public weak var addMoreViewBottomConstraint: NSLayoutConstraint!
    @IBOutlet public weak var postButtonLabel: UILabel!
    @IBOutlet public weak var postButton: UIButton!
    @IBOutlet public weak var userImage: UIImageView!
    @IBOutlet public weak var userContainer: UIView!
    @IBOutlet public weak var userContainerLabel: UILabel!
    @IBOutlet weak var titleNavController: UILabel!
    @IBOutlet weak var vwBackgroudSadow: UIView!
    @IBOutlet weak var vwCreatePost1: UIView!
    @IBOutlet weak var cntView: NSLayoutConstraint!
    @IBOutlet weak var btnPublicar: UIButton!
    @IBOutlet weak var btnCancel: UIButton!
    
    @IBOutlet weak var vwOptionsMedia: UIView!
    //@IBOutlet weak var postImage: UIImageView!
    var delegateTbl: FeedViewControllerDelegate?
    
    @IBOutlet weak var pickerView: UIPickerView!
    @IBOutlet weak var btnShowPicker: UIButton!
    var defaults = UserDefaults.standard
    var orgId: Int?
    var asPrm: Int = 1
    var scope: Int = 1
    //var imagePicker = UIImagePickerController()
    var picker = UIImagePickerController()
    
    @IBOutlet public weak var userContainerImage: UIImageView! = {
        let imageView = UIImageView()
        imageView.image = "adminIconYellow".getImage()
        
        return imageView
    }()
    
    @IBOutlet public weak var smileFaceImage2: UIImageView! = {
        let imageView = UIImageView()
        imageView.image = "smileFaceIcon".getImage()
       
       return imageView
    }()
    
    @IBOutlet public weak var locationImage2: UIImageView! = {
        let imageView = UIImageView()
        imageView.image = "locationIcon".getImage()
       
       return imageView
    }()
    
    @IBOutlet public weak var multimediaImage2: UIImageView! = {
        let imageView = UIImageView()
        imageView.image = "imagesIcon".getImage()
       return imageView
    }()
    
    @IBOutlet public weak var tableView: UITableView! {
        didSet { tableView.tableFooterView = UIView() }
    }
    
    //MARK: - Properties
    private var dropDownRowHeight: CGFloat = 20
    private var editPostAlert = EditPostAlert()
    public var hasManyGroups = Bool()
    public var group: GroupRealm?
    private let dropDown = MakeDropDown()
    public var asParam = String()
    var editPost: Bool = false
    var postInformation = PublicationRealm()
    var newPostsInfo: Posts?
    var comm: CmComments?
    var typeData = ""
    var arrayRelations = [ResultsRelations]()
    
    public var media = [MediaData]() {
        didSet {
            /*if let medDta = media[0].videoURL{
                let vidData = try? Data(contentsOf: medDta, options: .mappedIfSafe)
                let imageSize: Int = vidData?.count ?? 0
                print("size of image in KB: %f ", Double(imageSize) / 1024.0)
                print("size of image in MB: %f ", Double(imageSize) / 1024.0 / 1024)
            }*/
            postButtonLabel.textColor = !media.isEmpty ?
                UIColor(red: 0.10, green: 0.16, blue: 0.45, alpha: 1.00) :
                UIColor(red: 0.60, green: 0.60, blue: 0.60, alpha: 1.00)
            postButton.isEnabled = !media.isEmpty ? true : false
            vwOptionsMedia.isHidden = true
            let sizeCnt = UIScreen.main.bounds.height > 700 ? 2.2 : 3.0
            cntView.constant =  (UIScreen.main.bounds.height)/CGFloat(sizeCnt) - 110
            tableView.reloadData()
        }
    }
    
     func resize(_ image: UIImage) -> UIImage {
         var actualHeight = Float(image.size.height)
         var actualWidth = Float(image.size.width)
         let maxHeight: Float = 300.0
         let maxWidth: Float = 400.0
         var imgRatio: Float = actualWidth / actualHeight
         let maxRatio: Float = maxWidth / maxHeight
         let compressionQuality: Float = 0.5
         //50 percent compression
         if actualHeight > maxHeight || actualWidth > maxWidth {
             if imgRatio < maxRatio {
                 //adjust width according to maxHeight
                 imgRatio = maxHeight / actualHeight
                 actualWidth = imgRatio * actualWidth
                 actualHeight = maxHeight
             }
             else if imgRatio > maxRatio {
                 //adjust height according to maxWidth
                 imgRatio = maxWidth / actualWidth
                 actualHeight = imgRatio * actualHeight
                 actualWidth = maxWidth
             }
             else {
                 actualHeight = maxHeight
                 actualWidth = maxWidth
             }
         }
         let rect = CGRect(x: 0.0, y: 0.0, width: CGFloat(actualWidth), height: CGFloat(actualHeight))
         UIGraphicsBeginImageContext(rect.size)
         image.draw(in: rect)
         let img = UIGraphicsGetImageFromCurrentImageContext()
         let imageData = img?.jpegData(compressionQuality: CGFloat(compressionQuality))
         UIGraphicsEndImageContext()
         return UIImage(data: imageData!) ?? UIImage()
     }
     

    
    public var location: LocationsResult? {
        didSet {
            setName()
            postButtonLabel.textColor = location != nil ?
                UIColor(red: 0.10, green: 0.16, blue: 0.45, alpha: 1.00) :
                UIColor(red: 0.60, green: 0.60, blue: 0.60, alpha: 1.00)
            postButton.isEnabled = location != nil ? true : false
            tableView.reloadData()
        }
    }
    
    public var feeling: FeelingsResult? {
        didSet {
            setName()
            postButtonLabel.textColor = feeling != nil ?
                UIColor(red: 0.10, green: 0.16, blue: 0.45, alpha: 1.00) :
                UIColor(red: 0.60, green: 0.60, blue: 0.60, alpha: 1.00)
            postButton.isEnabled = feeling != nil ? true : false
        }
    }
    
    //MARK: - Life cycle
	override public func viewDidLoad() {
        super.viewDidLoad()
        setupvwBackgrounShadow()
        setupGestureBackgroun()
        setUpView()
        presenter?.requestRelations(SNId: UserDefaults.standard.integer(forKey: "SNId"))
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        print("VC ECNews - CreatePostVC ")
    }
    
    override public func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        setUpDropDown()
    }
    
    //MARK: - Methods
    private func setUpView() {
        let sizeCnt = UIScreen.main.bounds.height > 700 ? 2.2 : 3.0
        cntView.constant =  (UIScreen.main.bounds.height)/CGFloat(sizeCnt)
        vwCreatePost1.roundCorners(corners: [.layerMaxXMinYCorner, .layerMinXMinYCorner], radius: 18)
        vwCreatePost1.clipsToBounds = true
        titleNavController.text = !editPost ? "Nueva publicación" : "Editar publicación"
        nameLabel.text = defaults.string(forKey: "COMPLETENAME")
//        userImage.setImage(name: defaults.string(forKey: "COMPLETENAME"), image: nil)
        asParam = group?.role == "Admin" ? "Admin" : "User"
        btnPublicar.setTitle("", for: .normal)
        btnCancel.setTitle("", for: .normal)
        userContainer.isHidden = group?.role == "Admin" ? false : true
        if let imageString = UserDefaults.standard.string(forKey: "imageUrl") {
            userImage.loadS(urlS:imageString)
        }

        userContainer.isUserInteractionEnabled = true
        userContainer.setCorner(cornerRadius: 5)
        userContainer.setBorder(borderColor: UIColor(red: 0.11, green: 0.11, blue: 0.11, alpha: 1.00))
        
        userContainerLabel.text = group?.name
        
        textView.maxHeight = 100
        textView.delegate = self
        textView.font = UIFont(name: "Avenir-Book", size: 15)
        textView.textColor = UIColor(red: 0.11, green: 0.11, blue: 0.11, alpha: 1.00)
        textView.tintColor = UIColor(red: 0.10, green: 0.16, blue: 0.45, alpha: 1.00)
        textView.placeholder = !editPost ? "¿Qué quiero compartir?" : ""
        //postInformation
        switch typeData {
        case "Normal":
            textView.text = newPostsInfo?.content
        case "Comment":
            textView.text = comm?.content
        default:
            break
        }
        
        textView.autocorrectionType = .yes
        textView.returnKeyType = .done
        
        userImage.makeRounded()
        
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.keyboardDismissMode = .onDrag
        tableView.register(UINib(nibName: "ImagesTVC", bundle:  Bundle(for: ImagesTVC.self)), forCellReuseIdentifier: "ImagesTVC")
        tableView.register(UINib(nibName: "LocationsSelectionTVC", bundle: Bundle(for: LocationsSelectionTVC.self)), forCellReuseIdentifier: "LocationsSelectionTVC")
        
        containerView.roundCorners(corners: [.layerMinXMinYCorner, .layerMaxXMinYCorner], radius: 40)
        
        addMoreViewPanIndicator.setCorner(cornerRadius: 2)
        addMoreView.roundCorners(corners: [.layerMinXMinYCorner, .layerMaxXMinYCorner], radius: 60)
        addMoreView.setBorder(borderColor: UIColor(red: 0.91, green: 0.89, blue: 0.91, alpha: 1.00))
    
        /*Awqui tiene que ir toda la logica del objeto del servicio,
         si viene vacio el taPicker nameLabel.ishidden = false &
         btnShowPicker.isHidden = true
         */
        nameLabel.isHidden = true
        btnShowPicker.isHidden = false
        pickerView.isHidden = true
       
    }
    
    private func setUpDropDown() {
        dropDown.makeDropDownIdentifier = "DROP_DOWN_NEW"
        dropDown.cellReusableIdentifier = "UserSelectorTVC"
        dropDown.makeDropDownDataSourceProtocol = self
        dropDown.setUpDropDown(viewPositionReference: userContainer.globalFrame, offset: userContainer.frame.height * -1)
        dropDown.nib = UINib(nibName: "UserSelectorTVC", bundle: Bundle(for: UserSelectorTVC.self))
        dropDown.setRowHeight(height: self.dropDownRowHeight)
        self.view.addSubview(dropDown)
    }
    
    private func setupvwBackgrounShadow(){
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2){
            UIView.animate(withDuration: 0.3){
                self.vwBackgroudSadow.alpha = 0.4
            }
        }
    }
    
    private func setupGestureBackgroun(){
        let tapSuperView = UITapGestureRecognizer(target: self, action: #selector(tapGestureBackgroud))
        self.vwBackgroudSadow.addGestureRecognizer(tapSuperView)
    }
    
    @objc func tapGestureBackgroud(){
        vwBackgroudSadow.alpha = 0
        self.dismiss(animated: true, completion: nil)
    }
    
    func showAlert() {
        editPostAlert = EditPostAlert(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
        self.view.addSubview(editPostAlert)
        editPostAlert.continueEditingButton.addTarget(self, action: #selector(continueEditing), for: .touchUpInside)
        editPostAlert.discardButton.addTarget(self, action: #selector(discardPost), for: UIControl.Event.touchUpInside)
    }
    
    @objc func continueEditing(_ sender: UIButton) {
        editPostAlert.removeFromSuperview()
    }
    
    @objc func discardPost(_ sender: UIButton) {
        if hasManyGroups {
            self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        } else {
            self.presentingViewController?.dismiss(animated: true, completion: nil)
        }
    }
    
    @objc public func deleteLocation(_ sender: UIButton) {
        location = nil
    }
    
    @objc public func editImages(_ sender: UIButton) {
        let vc = EditImagesRouter.createModule() as! EditImagesViewController
        vc.delegate = self
        vc.media = media
        vc.modalPresentationStyle = .fullScreen
        self.present(vc, animated: true)
    }
    
    func didFinishMakingPost() {
        loadingView.isHidden = true
        activityIndicator.stopAnimating()
        self.dismiss(animated: true, completion: nil)
        NotificationCenter.default.post(name: Notification.Name("CreatePostDone"), object: nil)
        if hasManyGroups {
        //    self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        } else {
          //  self.presentingViewController?.dismiss(animated: true, completion: nil)
        }
        delegateTbl?.reloadTblData()
    }
    
    func didFinishMakingPostWithErrors(error: SocialNetworkErrors) {
        loadingView.isHidden = true
        activityIndicator.stopAnimating()
        if hasManyGroups {
            self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        } else {
            self.presentingViewController?.dismiss(animated: true, completion: nil)
        }
    }
    
    func setName() {
        nameLabel.text = group?.name
        
        if let feeling = feeling, let url = URL(string: feeling.image) {
            UIImageView().sd_setHighlightedImage(with: url, options: .refreshCached) { (image, error, _, _) in
                self.nameLabel.addMoreInfo(feeling.feeling, index: self.group?.name.count, image: image, text: "me siento")
            }
        }
        
        if let nameLocation = self.location?.name{
            self.nameLabel.addMoreInfo(nameLocation)
        }
    }
    
    //MARK: - Actions
    @IBAction func showReactions(_ sender: UIButton) {
        guard let vc = FeelingsRouter.createModule() as? FeelingsViewController else { return }
        vc.delegate = self
        vc.modalPresentationStyle = .fullScreen
        self.present(vc, animated: true)
    }
    
    @IBAction func showLocations(_ sender: UIButton) {
        guard let vc = LocationsRouter.createModule() as? LocationsViewController else { return }
        vc.delegate = self
        vc.modalPresentationStyle = .fullScreen
        self.present(vc, animated: true)
    }
    
    @IBAction func showImages(_ sender: UIButton) {
        guard let vc = ImagePickerViewController() as? ImagePickerController else { return }
        vc.delegate = self
        vc.modalPresentationStyle = .overFullScreen
        vc.navigationBar.backgroundColor = .white
        self.present(vc, animated: true)
    }
    
    @IBAction func ready(_ sender: UIButton) {
        
        if textView.hasText || !media.isEmpty || location != nil || feeling != nil {
             //CAMBIAR
            guard let text =  textView.text, let organizationId = Int(self.accessibilityLabel ?? "-1") else { return }
            textView.resignFirstResponder()
            loadingView.isHidden = false
            activityIndicator.startAnimating()
            if editPost{
                print("Edita::: mandara a editar ")
            }else{
                self.presenter?.newmakePost(content: text, location: location, feeling: feeling, media: media, organizationId: orgId,   asParam: asPrm, editPost: editPost, scope: scope)
            }
        }
    }
    
    
    @IBAction func btnActionShowPicker(_ sender: UIButton) {
        pickerView.isHidden = false
    }
    
    @IBAction func dismissKeyboard(_ sender: UITapGestureRecognizer) {
        textView.resignFirstResponder()
    }
    
    @IBAction func dismiss(_ sender: UIBarButtonItem) {
        if textView.hasText || !media.isEmpty {
            showAlert()
        } else {
            if hasManyGroups {
                self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
            } else {
                self.presentingViewController?.dismiss(animated: true, completion: nil)
            }
        }
    }
    
    @IBAction func selectUser(_ sender: UIButton) {
        dropDown.showDropDown(height: self.dropDownRowHeight * CGFloat(2))
    }
    
    class public func showModalPost(type: String) -> CreatePostViewController{
        let view = CreatePostViewController(nibName: "CreatePostViewController", bundle: Bundle(identifier: "mx.arquidiocesis.EncuentroCatolicoNews"))
        
        let interactor = CreatePostInteractor()
        let router = CreatePostRouter()
        let presenter = CreatePostPresenter(interface: view, interactor: interactor, router: router)
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view
        view.modalPresentationStyle = .overFullScreen
        
        return view
    }
    
    @IBAction func btnActionPublicar(_ sender: UIButton) {
        if textView.hasText || !media.isEmpty || location != nil || feeling != nil {
             //CAMBIAR
            guard let text =  textView.text, let organizationId = Int(self.accessibilityLabel ?? "-1") else { return }
            textView.resignFirstResponder()
            loadingView.isHidden = false
            activityIndicator.startAnimating()
            
            if editPost{
                print("Debe de editar::::")
                switch typeData {
                case "Normal":
                    presenter?.editMakePost(content: text, media: media, organizationID: 20, statusId: 1, editPost: true, postId: newPostsInfo?.id ?? 0)
                case "Comment":
                    presenter?.editComment(idComment: comm?.id ?? 0, commentString: text)
                default:
                    break
                    
                }
                
            }else{
                presenter?.newmakePost(content: text, location: location, feeling: feeling, media: media, organizationId: orgId,   asParam: asPrm, editPost: editPost, scope: scope)
            }
            
        }
    }
    
    
    @IBAction func btnActionCancelar(_ sender: UIButton) {
        self.vwBackgroudSadow.alpha = 0
        self.dismiss(animated: true, completion: nil)
    }
    
    
    @IBAction func btnActionAddImage(_ sender: UIButton) {
        print("CLICK IMAGEN")
        guard let vc = ImagePickerViewController() as? ImagePickerController else { return }
        vc.delegate = self
        vc.modalPresentationStyle = .overFullScreen
        vc.navigationBar.backgroundColor = .white
        
        self.present(vc, animated: true)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        print("Se da clic en la funcion de imagePickerController")
//        picker.dismiss(animated: true, completion: nil)
//        guard let image = info[.originalImage] as? UIImage else {
//            fatalError("Expected a dictionary containing an image, but was provided the following: \(info)")
//        }
//        
//        pickImageCallback?(image)
    }
    
    
    @IBAction func btnActionAddViewo(_ sender: UIButton) {
        guard let vc = ImagePickerViewController() as? ImagePickerController else { return }
        vc.delegate = self
        vc.modalPresentationStyle = .overFullScreen
        vc.navigationBar.backgroundColor = .white
        self.present(vc, animated: true)
    }
    
    
    @IBAction func btnAddArchivo(_ sender: UIButton) {
        
    }
}

extension CreatePostViewController: UITextViewDelegate {
    public func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        if text == "\n" {
            textView.resignFirstResponder()
            return false
        }
        
        let maxNumberOfChars = 500
        let newText = (textView.text as NSString).replacingCharacters(in: range, with: text)
        let numberOfChars = newText.count
        return numberOfChars < maxNumberOfChars
    }
    
    public func textViewDidChange(_ textView: UITextView) {
        postButtonLabel.textColor = !textView.text.isEmpty ?
            UIColor(red: 0.10, green: 0.16, blue: 0.45, alpha: 1.00) :
            UIColor(red: 0.60, green: 0.60, blue: 0.60, alpha: 1.00)
        postButton.isEnabled = !textView.text.isEmpty ? true : false
    }

}

extension CreatePostViewController: MakeDropDownDataSourceProtocol {
    public func getDataToDropDown(cell: UITableViewCell, indexPos: Int, makeDropDownIdentifier: String) {
        if makeDropDownIdentifier == "DROP_DOWN_NEW" {
            let customCell = cell as? UserSelectorTVC
            
            switch indexPos {
            case 0:
                customCell?.userImage.image = "adminIconYellow".getImage()
                customCell?.userNameLabel.text = group?.name
            default:
                customCell?.userImage.image = "userIcon".getImage()
//                customCell?.userNameLabel.text = SocialNetworkConstant.shared.userName.twoWords
            }
            
            customCell?.selectButton.addTarget(self, action: #selector(userSelection), for: .touchUpInside)
            customCell?.selectButton.tag = indexPos
        }
    }
    
    @objc public func userSelection(_ sender: UIButton) {
        if(sender.tag == 0) {
            userContainerLabel.text = group?.name
            userContainerImage.image = "adminIconYellow".getImage()
            asParam = "Admin"
        } else {
//            userContainerLabel.text = SocialNetworkConstant.shared.userName.twoWords
            userContainerImage.image = "userIcon".getImage()
            asParam = "User"
        }
        
        dropDown.hideDropDown()
    }
    
    public func numberOfRows(makeDropDownIdentifier: String) -> Int {
        return 2
    }

}

extension CreatePostViewController: UIPickerViewDelegate, UIPickerViewDataSource{
    public func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    public func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return arrayRelations.count
    }
    
    
    public func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return arrayRelations[row].name
    }
    
    public func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        btnShowPicker.setTitle(arrayRelations[row].name, for: .normal)
        
        if arrayRelations[row].id == nil {
            // Es la publicacion de usuario normal
            scope = 1
            asPrm = 1
        }else{
            // Es la publicacion de picker
            asPrm = 2
            scope =  (arrayRelations[row].type ?? 0) + 1
            orgId = arrayRelations[row].id
        }
        
        pickerView.isHidden = true
    }
    
}

// MARK: RELATIONS RESPONSE -
extension CreatePostViewController {
    func successGetRelations(data: RelationsData) {
        
        let addUser = ResultsRelations(id: nil, image: nil, name: defaults.string(forKey: "COMPLETENAME"), type: 1)
        arrayRelations = data.result ?? arrayRelations
        arrayRelations.append(addUser)
        pickerView.delegate = self
        pickerView.dataSource = self
        
        /*Awqui tiene que ir toda la logica del objeto del servicio,
         si viene vacio el taPicker nameLabel.ishidden = false &
         btnShowPicker.isHidden = true
         */
        if data.result?.count == 0 {
            btnShowPicker.isHidden = true
            nameLabel.isHidden = false
           
        }else{
            btnShowPicker.isHidden = false
            nameLabel.isHidden = true
            
        }
        
    }
    
    func failGetRelations(mesage: String) {
        btnShowPicker.isHidden = true
    }
}

extension CreatePostViewController {
    func successEditComment(data: ResultEditComment) {
        didFinishMakingPost()
    }
    
    func failEditComment(message: String) {
        print(message)
       didFinishMakingPost()
    }
}
