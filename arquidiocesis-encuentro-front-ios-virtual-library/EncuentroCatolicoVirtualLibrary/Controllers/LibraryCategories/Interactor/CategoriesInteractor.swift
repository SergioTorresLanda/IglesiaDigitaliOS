//
//  CategoriesInteractor.swift
//  EncuentroCatolicoVirtualLibrary
//
//  Created Desarrollo on 20/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CategoriesInteractor: CategoriesInteractorProtocol {
    weak var presenter: CategoriesPresenterProtocol?
    let id = UserDefaults.standard.integer(forKey: "id")
    
    func requestContentByCategory(category: String) {
        guard let endpoint: URL = URL(string: "https://xmbcqr3wvd.execute-api.us-east-1.amazonaws.com/develop/library/category/\(category)") else {
            print("Error formando url")
            self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: nil)
            return
        }
        
        var request = URLRequest(url: endpoint)
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("\(id)", forHTTPHeaderField: "X-User-Id")
        request.httpMethod = "GET"
        let tksession = UserDefaults.standard.string(forKey: "idToken")
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            //print("-->>  data: ", data)
            //print("-->>  response: ", response)
            //print("-->>  error: ", error)
            if error != nil {
                print("Hubo un error")
                return
            }
            
            if (response as! HTTPURLResponse).statusCode == 200 {
                let contentResponse: LibraryCategories? = try? JSONDecoder().decode(LibraryCategories.self, from: data!)
                
                self.presenter?.getResponse(errores: ServerErrors.OK, data: contentResponse)
            } else {
                APIType.shared.refreshToken()
                self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: nil)
            }
        }
        tarea.resume()
    }
    
    func requestContentWithFilter(filter: String){
            guard let endpoint: URL = URL(string: filter) else {
                print("Error formando url")
                self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: nil)
                return
            }
            
            var request = URLRequest(url: endpoint)
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            request.setValue("\(id)", forHTTPHeaderField: "X-User-Id")
            request.httpMethod = "GET"
        let tksession = UserDefaults.standard.string(forKey: "idToken")
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
            
            let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
                //print("-->>  data: ", data)
                //print("-->>  response: ", response)
                //print("-->>  error: ", error)
                if error != nil {
                    print("Hubo un error")
                    return
                }
                
                if (response as! HTTPURLResponse).statusCode == 200 {
                    let contentResponse: LibraryCategories? = try? JSONDecoder().decode(LibraryCategories.self, from: data!)
                    
                    self.presenter?.getResponse(errores: ServerErrors.OK, data: contentResponse)
                } else {
                    APIType.shared.refreshToken()
                    self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: nil)
                }
            }
            tarea.resume()
    }
}
