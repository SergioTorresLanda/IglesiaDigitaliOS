//
//  ImagePresenterViewController.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Miguel Angel Vicario Flores on 17/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift
import SDWebImage

public class ImagePresenterViewController: UIViewController, ImagePresenterViewProtocol {

	var presenter: ImagePresenterPresenterProtocol?
    
    //MARK: - @IBOutlets
    @IBOutlet public weak var pageControl: UIPageControl!
    @IBOutlet public weak var scrollView: UIScrollView!
    @IBOutlet public weak var backImage: UIImageView!  = {
        let imageView = UIImageView()
        imageView.image = "backIcon".getImage().withRenderingMode(.alwaysTemplate)
        imageView.tintColor = .white
        
        return imageView
    }()
    
    //MARK: - Properties
    public var media = List<MediaRealm>()
    
    //MARK: - Life cycle
    public override func viewDidLoad() {
        super.viewDidLoad()
        
        scrollView.delegate = self
        pageControl.numberOfPages = media.count
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        print("VC ECNews - ImagePresenterVC ")
    }
    
    public override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        setUpView()
    }
    
    //MARK: - Methods
    private func setUpView() {
        scrollView.contentSize = CGSize(width: scrollView.frame.size.width * CGFloat(media.count), height: scrollView.frame.size.height)
        
        for (index, media) in media.enumerated() {
            let frame = CGRect(x: scrollView.frame.size.width * CGFloat(index),
                               y: 0,
                               width: scrollView.frame.size.width,
                               height: scrollView.frame.size.height)
            switch media.mimeType {
            case "image/jpeg", "image/png":
                let item = ImageSlideshowItem(image: media, zoomEnabled: true)
                item.frame = frame
                item.imageView.contentMode = .scaleAspectFit
                scrollView.addSubview(item)
            default:
                let item = VideoSlideShowItem(frame: frame, videoURL: media.url)
                item.frame = CGRect(x: scrollView.frame.size.width * CGFloat(index),
                                    y: 0,
                                    width: scrollView.frame.size.width,
                                    height: scrollView.frame.size.height)
                item.playVideoButton.addTarget(self, action: #selector(presentVideo), for: .touchUpInside)
                item.playVideoButton.tag = index
                scrollView.addSubview(item)
            }
        }
    }
    
    @objc private func presentVideo(_ sender: UIButton) {
        guard let url = URL(string: media[sender.tag].url) else { return }
        let vc = VideoPresenterRouter.createModule() as! VideoPresenterViewController
        vc.videoURL = url
        self.present(vc, animated: true)
    }
    
    //MARK: - Actions
    @IBAction private func popView(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }
}

//MARK: - UIScrollViewDelegate
extension ImagePresenterViewController: UIScrollViewDelegate {
    public func scrollViewDidScroll(_ scrollView: UIScrollView) {
        pageControl.currentPage = scrollView.frame.size.width > 0 ?
                                  Int(scrollView.contentOffset.x + scrollView.frame.size.width / 2) / Int(scrollView.frame.size.width) :
                                  0
    }
}

//MARK: - UICollectionViewDataSource
//extension ImagePresenterViewController: UICollectionViewDataSource {
//    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
//        return media.count
//    }
//
//    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
//        switch media[indexPath.row].mimeType {
//        case "image/jpeg", "image/png":
//            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ImagesZoomCVC", for: indexPath) as! ImagesZoomCVC
//
//            let url = URL(string: media[indexPath.row].url)
//            cell.contentImage.sd_setImage(with: url, placeholderImage: nil, options: .refreshCached, context: nil)
//
//            return cell
//        default:
//            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "VideoCVC", for: indexPath) as! VideoCVC
//
//            cell.videoURL = media[indexPath.row].url
//
//            cell.delegate = self
//
//            return cell
//        }
//    }
//}

//MARK: - UICollectionViewDelegate
//extension ImagePresenterViewController: UICollectionViewDelegate {
//    public func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>) {
//
//        let numberOfMedia = media.count
//        targetContentOffset.pointee = scrollView.contentOffset
//        let cellWidth: Double = Double(self.view.frame.width)
//        var page: Double = Double(scrollView.contentOffset.x) / cellWidth + Double(0.5)
//
//        if (velocity.x > 0) { page += 0.5 }
//        if (velocity.x < 0) { page -= 0.5 }
//        page = max(page, 0)
//
//        if page >= Double(numberOfMedia) {
//            page = Double(numberOfMedia - 1)
//        }
//
//        let indexPath: IndexPath = IndexPath(row: Int(page), section:0)
//        collectionView?.scrollToItem(at: indexPath, at: UICollectionView.ScrollPosition.left, animated: true)
//    }
//}

//MARK: - UICollectionViewDelegateFlowLayout
//extension ImagePresenterViewController: UICollectionViewDelegateFlowLayout {
//    public func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
//        return CGSize(width: collectionView.frame.width, height: collectionView.frame.height)
//    }
//}

//MARK: - VideosDelegate
extension ImagePresenterViewController: VideosDelegate {
    public func presentFullScreenVideo(videoURL: String?) {
        guard let videoURL = videoURL, let url = URL(string: videoURL) else { return }
        let vc = VideoPresenterRouter.createModule() as! VideoPresenterViewController
        vc.videoURL = url
        self.present(vc, animated: true)
    }
}
