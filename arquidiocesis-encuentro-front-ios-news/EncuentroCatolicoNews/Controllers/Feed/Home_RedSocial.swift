//
//  FeedViewController.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Miguel Angel Vicario Flores on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift
import EncuentroCatolicoProfile
import EncuentroCatolicoVirtualLibrary

protocol FeedViewControllerDelegate{
    func reloadTblData()
}

public class Home_RedSocial: UIViewController, FeedViewProtocol, FeedViewControllerDelegate {
    
    var presenter: FeedPresenterProtocol?
    let shimmer = Shimmer()
    
    //MARK: - @IBoutlets
    @IBOutlet public weak var notificationView: UIView!
    @IBOutlet public weak var tableView: UITableView!
    @IBOutlet weak var barraNavegacion: UIView!
    @IBOutlet weak var txfSearch: UITextField!
    @IBOutlet weak var btnCreatePost: UIButton!
    @IBOutlet weak var imgProfile: UIImageView!
    @IBOutlet weak var viewS: UIView!
    @IBOutlet weak var miRedBtn: UIButton!
    @IBOutlet weak var btnGoTo: UIButton!
    @IBOutlet public weak var notificationImage: UIImageView!  = {
        let imageView = UIImageView()
        imageView.image = "Notification".getImage()
        
        return imageView
    }()
    
    //MARK: - Properties
    private let refreshControl = UIRefreshControl()
    public var isPrefetching = false
    let name = UserDefaults.standard.string(forKey: "COMPLETENAME")
    let image = UserDefaults.standard.data(forKey: "userImage")
    let SNId = UserDefaults.standard.integer(forKey: "SNId")
    public var posts: [PublicationRealm]? {
        didSet { tableView.reloadData() }
    }
    var newPosts = [Posts]()
    var followsIds : [Int] = []
    let ds = DispatchGroup()
    let sm = DispatchSemaphore(value: 0)
    let newUser = UserDefaults.standard.bool(forKey: "isNewUser")
    var alertFields : AcceptAlert?

    //MARK: - Life cycle
    override public func viewDidLoad() {
        super.viewDidLoad()
        NotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name("NotificationFeed"), object: nil)
        
        setUpView()
        startShimmer()
    }
    
    override public func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("VC ECNews - FeedVC ")
        setupTabBar()
        ///SEMAPHOREEE
        let dQ = DispatchQueue.global(qos: .background)
        ds.enter()
        dQ.async {
            if self.SNId != 1229 {//arquidiocesis no buscar followers
                self.presenter?.getFollowed(snId:self.SNId)
                self.sm.wait()
            }
            print("SALIO DE FLL")
            print(String(self.followsIds.count))
            self.presenter?.getNewPosts(isFromPage: false, isRefresh: false)
            self.sm.wait()
            print("SALIO DE AMBAS")
            self.ds.leave()
        }
        ds.notify(queue: .main){
            self.shimmer.stopLoader()
            //self.tableView.reloadData()
        }
        
        
    }
    
    override public func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }
    
    @IBAction func miRedClick(_ sender: Any) {
        if newUser{
            self.navigationController?.pushViewController(FollowersWireFrame.createFollowersModule(user: UserBasic(id:SNId, name: name, image: "self")), animated: false)
        }else{
            showCanonAlert(title: "Atención", msg: "Regístrate o inicia sesión para tener un perfil en nuestra red social.")
        }
    }
    
    func showCanonAlert(title:String, msg:String){
        alertFields = AcceptAlert.showAlert(titulo: title, mensaje: msg)
        alertFields!.view.backgroundColor = .clear
        self.present(alertFields!, animated: true)
    }
    
    //MARK: - Methods
    func setupTabBar(){
        let tabBar = self.tabBarController as? SocialNetworkController
        tabBar?.tabBar.isHidden = true
        tabBar?.customTabBar.isHidden = false
    }
    
    func startShimmer(){
        shimmer.startLoader(view: viewS, rows: [100, 200, 100, 200, 100])
    }
    
    private func setUpView() {
        let img = UIImage(named: "iconSearch", in: Bundle(for: Home_RedSocial.self), compatibleWith: nil)
        setPaddingWithImage(image: img ?? UIImage(), textField: txfSearch)
        imgProfile.layer.borderWidth = 0.5
        imgProfile.layer.borderColor = UIColor.black.cgColor
        imgProfile.clipsToBounds = true
        imgProfile.makeRounded()
        //imgProfile.setImage(name: name, image: nil)
        let newUser = UserDefaults.standard.bool(forKey: "isNewUser")
        if newUser {//esta logueado proceder
            if let imageString = UserDefaults.standard.string(forKey: "imageUrl") {
                imgProfile.loadS(urlS:imageString)
            }
        }
        btnCreatePost.setTitle("", for: .normal)
        barraNavegacion.layer.cornerRadius = 30
        barraNavegacion.layer.shadowRadius = 5
        barraNavegacion.layer.shadowOpacity = 0.5
        barraNavegacion.layer.shadowColor = UIColor.black.cgColor
        barraNavegacion.layer.maskedCorners = [.layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        
        refreshControl.addTarget(self, action: #selector(refresh(_:)), for: .valueChanged)
        
        tableView.addSubview(refreshControl)
        tableView.prefetchDataSource = self
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "FeedTVC", bundle: Bundle(for: FeedTVC.self)), forCellReuseIdentifier: "FeedTVC")
        tableView.register(UINib(nibName: "createPostTVC", bundle: Bundle(for: CreatePostTVC.self)), forCellReuseIdentifier: "CreatePostTVC")
        
    }
    
    
    func setPaddingWithImage(image: UIImage, textField: UITextField){
        let imageView = UIImageView(image: image)
        imageView.contentMode = .scaleAspectFit
        let viewR = UIView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))
        imageView.frame = CGRect(x: 12.0, y: 12.0, width: 25.0, height: 25.0)//13 x y  y
        let seperatorView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 50))
        seperatorView.backgroundColor = UIColor.clear
        textField.leftViewMode = .always
        viewR.addSubview(imageView)
        textField.leftViewMode = UITextField.ViewMode.always
        textField.leftView = seperatorView
        textField.rightViewMode = UITextField.ViewMode.always
        textField.rightView = viewR
    }
    
    @objc func methodOfReceivedNotification(notification: Notification) {
        tableView.setContentOffset(.zero, animated: true)
    }
    
    @objc func refresh(_ sender: UIRefreshControl) {
        storedData.skip = 0
        //startShimmer()
        presenter?.getNewPosts(isFromPage: false, isRefresh: true) //--> Nuevo
    }
    
    func didFinishGettingPosts(isFromPage: Bool, posts: [Posts]) {
        if isFromPage {
            isPrefetching = false
        }else{
            refreshControl.endRefreshing()
        }
        var postsFinal = [Posts]()
        for post in posts {
            if followsIds.contains(post.author?.id ?? 0) || post.author?.id==1229 || SNId == 1229 || post.author?.id==SNId{
                print("está en seguidores o es arqui, o soy arqui o soy yo::")
                print(post.author?.name ?? "x")
                postsFinal.append(post)
            } else {
                print("Se quito publicacion de::::")
                print(post.author?.name ?? "id:")
                print(post.author?.id ?? "x")
            }
        }
        newPosts = postsFinal
        sm.signal()
        self.tableView.reloadData()
    }
    
    func didFinishGettingPostsWithErrors(error: SocialNetworkErrors) {
        posts = retrieveFromRealm()
        refreshControl.endRefreshing()
        shimmer.stopLoader()
    }
    
    func getFollowsServiceError(error: SocialNetworkErrors) {
        print("FALLÓ ALGO OBTENIENDO FOLLOWS")
        sm.signal()
        //salir del semaforo
        //presenter?.getNewPosts(isFromPage: false, isRefresh: false)
    }
    
    func didFinishGettingNotifications(notificationsCount: String?) {
        notificationView.addbadge(text: notificationsCount)
    }
    
    func getArrFollows(followeds: [Followers], hasMore:Bool) {
        print("FOLLOWEDS TOTALL:::")
        //print(followeds)
        //isFollowers=false
        //numF+=1
        for f in followeds{
            followsIds.append(f.userId)
        }
        //arrFollows.append(contentsOf: followeds)
        //arrInfoToShow = arrFollowed
        if hasMore {
            presenter?.getFollowed(snId:SNId)
        }else{
            sm.signal()
        }
    }
    
    // GGG --> Obtiene de base datos
    private func retrieveFromRealm() -> [PublicationRealm]? {
        let results = RealmManager.fetchDataSorted(object: PublicationRealm.self)
        return results
    }
    
    //MARK: - Actions
    @IBAction private func popView(_ sender: UIButton) {
        _ = navigationController?.popViewController(animated: true)
        RealmManager.clearDataBase()
    }
    
    @IBAction func goToFollow(_ sender: Any) {
        print("Click en foto")
        if newUser{
            self.navigationController?.pushViewController(FollowersWireFrame.createFollowersModule(user: UserBasic(id:SNId, name: name, image: "self")), animated: true)
        }else{
            //showCanonAlert(title: "Atención", msg: "Regístrate o inicia sesión para solicitar una intención.")
        }
    }
    
    @IBAction private func showNotifications(_ sender: UIButton) {
        let vc = NotificationsRouter.createModule()
        vc.modalPresentationStyle = .fullScreen
        self.present(vc, animated: true)
    }
    
    @available(iOS 13.0, *)
    @IBAction func goToSearch(_ sender: Any) {
        self.view.endEditing(true)
        if newUser{
            let view = SocialSearchRouter.createModule()
            self.navigationController?.pushViewController(view, animated: true)
        }else{
            showCanonAlert(title: "Atención", msg: "Regístrate o inicia sesión para buscar y seguir a otros usuarios.")
        }
    }
    
    @IBAction func btnActionCreatePost(_ sender: UIButton) {
        if newUser{
            let view = RedSocial_CrearPost.showModalPost(type: "Crear")
            view.transitioningDelegate = self
            view.delegateTbl = self
            self.present(view, animated: true, completion: nil)
        }else{
            showCanonAlert(title: "Atención", msg: "Regístrate o inicia sesión para publicar en nuestra red social.")
        }
    }
    
    func reloadTblData() {
        self.presenter?.getNewPosts(isFromPage: false, isRefresh: true)
        tableView.reloadData()
    }
}


