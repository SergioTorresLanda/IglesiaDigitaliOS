//
//  NotificationsViewController.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Diego Martinez on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import LetterAvatarKit
import RealmSwift

public class NotificationsViewController: UIViewController, NotificationsViewProtocol {

    var presenter: NotificationsPresenterProtocol?
    
    //MARK: - @IBoutlets
    @IBOutlet public var noNotificationsView: UIView!
    @IBOutlet public var tableView: UITableView! {
        didSet { tableView.tableFooterView = UIView() }
    }
    
    //MARK: - Properties
    var allNotifications = [NotificationDocument]()
    var todayNotifications = [NotificationDocument]()
    var otherNotifications = [NotificationDocument]()
    
    public var posts: [PublicationRealm]?
    
    //MARK: - Life cycle
    override public func viewDidLoad() {
        super.viewDidLoad()
        
        setUpView()
    }
    
    //MARK: - Methods
    private func setUpView() {
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "NotificationsGTVC", bundle: Bundle(for: NotificationsGTVC.self)), forCellReuseIdentifier: "NotificationsGTVC")
        
        presenter?.getNotifications(userId: SocialNetworkConstant.shared.userId)
    }
    
    func didFinishGettingNotifications(data: [NotificationDocument]) {
        filterData(data: data)
    }
    
    @objc public func showEditPost(_ sender: UIButton) {
        let vc = NotificationsModalRouter.createModule() as! NotificationsModalViewController
        vc.delegate = self
        vc.document = allNotifications[sender.tag]
        vc.user = SocialNetworkConstant.shared.userId
        vc.index = sender.tag
        vc.modalPresentationStyle = .custom
        vc.transitioningDelegate = self
        self.present(vc, animated: true)
    }
    
    private func filterData(data: [NotificationDocument]) {
        allNotifications = data
        noNotificationsView.isHidden = allNotifications.count > 0 ? true : false
        todayNotifications = allNotifications
            .filter { Date(timeIntervalSince1970: TimeInterval($0.date )).isFromCurrentDate() }
        otherNotifications = allNotifications
            .filter { !Date(timeIntervalSince1970: TimeInterval($0.date )).isFromCurrentDate() }
        tableView.reloadData()
    }
    
    //MARK: - Actions
    @IBAction func dismiss(_ sender: UIBarButtonItem) {
        self.dismiss(animated: true, completion: nil)
    }
}


//MARK: - UITableViewDataSource
extension NotificationsViewController: UITableViewDataSource {
    public func numberOfSections(in tableView: UITableView) -> Int {
        return 2
    }
    
    public func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "Hoy"
        default:
            return "Recientes"
        }
    }
    
    public func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        switch section {
        case 0:
            return todayNotifications.count
        default:
            return otherNotifications.count
        }
    }
    
    public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "NotificationsGTVC", for: indexPath) as! NotificationsGTVC
        
        var rowData: NotificationDocument?
        
        switch indexPath.section {
        case 0:
            rowData = todayNotifications[indexPath.row]
        default:
            rowData = otherNotifications[indexPath.row]
        }
        
        cell.background.backgroundColor = rowData?.viewed == true ?
            UIColor.white :
            UIColor(red: 240.0/255.0, green: 240.0/255.0, blue: 240.0/255.0, alpha: 1.0)
        
        let nameString = rowData?.autor.name != nil ? rowData?.autor.name ?? "" : rowData?.group.name ?? ""
        
        cell.userImage.image = LetterAvatarMaker()
            .build { c in
                c.circle = true
                c.username = nameString.twoWords
                c.borderWidth = 1.0
                c.backgroundColors = [ UIColor(red: 132/255, green: 132/255, blue: 132/255, alpha: 1.00) ]
        }
        
        let myAttributeName = [ NSAttributedString.Key.font: UIFont(name: "Avenir-Black", size: 15)! ]
        let myAttrStringName = NSAttributedString(string: nameString + " ", attributes: myAttributeName)
        
        let messageString = rowData?.message ?? ""
        let myAttributeMessage = [ NSAttributedString.Key.font: UIFont(name: "Avenir-Book", size: 15)! ]
        let myAttrStringMessage = NSAttributedString(string: messageString, attributes: myAttributeMessage)
        
        let combination = NSMutableAttributedString()
        combination.append(myAttrStringName)
        combination.append(myAttrStringMessage)
        
        cell.contentLabel.attributedText = combination
        cell.dateLabel.text = Date(timeIntervalSince1970: TimeInterval(rowData?.date ?? 0)).formatRelativeString()
        
        cell.editPostButton.tag = indexPath.row
        cell.editPostButton.addTarget(self, action: #selector(showEditPost), for: .touchUpInside)
        
        return cell
    }
}

//MARK: - UITableViewDelegate
extension NotificationsViewController: UITableViewDelegate {
    public func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
        let header = view as! UITableViewHeaderFooterView
        header.tintColor = UIColor.white
        header.textLabel?.textColor = UIColor.black
    }
    
    public func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    public func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
    
    public func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    public func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath) as! NotificationsGTVC
        if cell.background.backgroundColor != UIColor.white {
            cell.background.backgroundColor = UIColor.white
        }

        guard let post = posts?[indexPath.row] else { return }
        presenter?.showPostDetail(navController: self.navigationController, post: post)
    }
}

//MARK: - NotificationsModalDelegate
extension NotificationsViewController: NotificationsModalDelegate {
    public func deletedNotification(index: Int) {
        allNotifications.remove(at: index)
        noNotificationsView.isHidden = allNotifications.count > 0 ? true : false
        todayNotifications = allNotifications
            .filter { Date(timeIntervalSince1970: TimeInterval($0.date )).isFromCurrentDate() }
        otherNotifications = allNotifications
            .filter { !Date(timeIntervalSince1970: TimeInterval($0.date )).isFromCurrentDate() }
        tableView.reloadData()
    }
}

//MARK: - UIViewControllerTransitioningDelegate
extension NotificationsViewController: UIViewControllerTransitioningDelegate {
    public func presentationController(forPresented presented: UIViewController, presenting: UIViewController?, source: UIViewController) -> UIPresentationController? {
        ModalPresentationController(presentedViewController: presented, presenting: presenting)
    }
}
