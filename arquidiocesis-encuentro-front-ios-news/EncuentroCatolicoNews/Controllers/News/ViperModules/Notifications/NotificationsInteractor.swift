//
//  NotificationsInteractor.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Diego Martinez on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class NotificationsInteractor: NotificationsInteractorProtocol {

    weak var presenter: NotificationsPresenterProtocol?
    
    //MARK: - RealTime
    func getNotifications(userId: Int) {
        let notifications = [NotificationDocument]()
        
        /*guard let firebase_instance = SocialNetworkConstant.shared.instance else {
            debugPrint("ProspectosInteractor error: firebase instance was nil.")
            return
        }
        
        let fireStore = Firestore.firestore(app: firebase_instance)
        fireStore.collection("user")
            .document(String(SocialNetworkConstant.shared.userId))
            .collection("notifications").order(by: "date", descending: true)
            .getDocuments{ (snapshot, error) in
                guard let snapshot = snapshot else { return }
                guard let documents = (snapshot as NSObject).value(forKey: "documents") as? NSArray else { return }

                for document in documents {
                    guard let object = document as? NSObject else { return }
                    guard let data = object.value(forKey: "data") as? [String: Any] else { return }
                    guard let documentID = object.value(forKey: "documentID") as? String else { return }
                    guard let group = data["group"] as? [String: Any], let id = group["id"] as? Int,
                          let name = group["name"] as? String, let message = data["message"] as? String,
                          let viewed = data["viewed"] as? Bool, let date = data["date"] as? Int else { return }
                    if let autor = data["autor"] as? [String: Any] {
                        let notificationModel = NotificationDocument(
                            documentID: documentID,
                            autor: AutorDocument(FIIDEMPLEADO: autor["FIIDEMPLEADO"] as? Int, name: autor["name"] as? String),
                            date: date,
                            group: GroupDocument(id: id, name: name),
                            message: message,
                            viewed: viewed
                        )

                        notifications.append(notificationModel) 
                    } else {
                        let notificationModel = NotificationDocument(
                            documentID: documentID,
                            autor: AutorDocument(FIIDEMPLEADO: nil, name: nil),
                            date: date,
                            group: GroupDocument(id: id, name: name),
                            message: message,
                            viewed: viewed
                        )

                        notifications.append(notificationModel)
                    }
                }*/

                self.presenter?.didFinishGettingNotifications(data: notifications)
        //}
    }
    
    func writeIsViewed(documentId: String){
        /*guard let firebase_instance = SocialNetworkConstant.shared.instance else {
            debugPrint("ProspectosInteractor error: firebase instance was nil.")
            return
        }
        
        let fireStore = Firestore.firestore(app: firebase_instance)
        fireStore.collection("user")
            .document(String(SocialNetworkConstant.shared.userId))
            .collection("notifications")
            .document()*/
    }
    
}
