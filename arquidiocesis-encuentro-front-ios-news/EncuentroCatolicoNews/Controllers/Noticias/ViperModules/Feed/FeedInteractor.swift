//
//  FeedInteractor.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Miguel Angel Vicario Flores on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Alamofire
import RealmSwift

public struct PublicationsAll: Codable {
    let dateEnd: Int
    let dateInit: Int64
    let skip: Int
    let limit: Int
    let FIIDEMPLEADO: Int
}

public struct PublicationsWatch: Codable {
    let post_id: Int
    let FIIDEMPLEADO: Int
}

public class FeedInteractor: FeedInteractorProtocol {

    weak var presenter: FeedPresenterProtocol?
    
    //MARK: - Properties
    private var snService = SocialNetworkService()
    //private var listener: ListenerRegistration?
    
    //MARK: - Posts
    func getPosts(isFromPage: Bool) {
        
        let postsLimit = DefaultsValues.max_length_all_post
        let dateInit = DefaultsValues.date_init_post
        let skip = storedData.skip
        let socialNetwork = SocialNetwork.openSocialNetowrk(userName: "MARIO HERNANDEZ", userImage: UIImage(), userId: 100,
                                                            employeeNumber: "8974563", enviroment: .Release)
        let params = PublicationsAll(dateEnd: Int(NSDate().timeIntervalSince1970 * 1000),
                                     dateInit: dateInit,
                                     skip: skip,
                                     limit: postsLimit,
                                     FIIDEMPLEADO: 100)
        
        let request = snService.getRequestWP(method: .publicationsAll, params: params)
        snService.makeRequest(request: request) { (data, error) in
            if let error = error {
                self.presenter?.didFinishGettingPostsWithErrors(error: error)
            } else {
                do {
                    let realm = try Realm()
                    let json = try JSONSerialization.jsonObject(with: data!, options: .fragmentsAllowed) as? [String: Any]
                    guard let publications = json?["publications"] as? [[String : Any]],
                          let pages = json?["pages"] as? Int else {
                            self.presenter?.didFinishGettingPostsWithErrors(error: SocialNetworkErrors.ResponseError)
                            return
                          }
                        
                        storedData.pages = pages
                        
                        let publicationsData = try JSONSerialization.data(withJSONObject: publications, options: .fragmentsAllowed)
                        let result = try JSONDecoder().decode(PublicationsRealm.self, from: publicationsData)
                        
                        try result.forEach { (publication) in
                            if let location = publication.location, let image = location.imgLocation, image != "", publication.mediaList.isEmpty {
                                let media = MediaRealm()
                                media.id = location.id
                                media.url = image
                                media.mimeType = "image/location"
                                try realm.write {
                                    publication.mediaList.append(media)
                                }
                            }
                        }
                        
                        RealmManager.addToDataBase(result)
                        self.presenter?.didFinishGettingPosts(isFromPage: isFromPage)
                    
                } catch {
                    self.presenter?.didFinishGettingPostsWithErrors(error: SocialNetworkErrors.ResponseError)
                }
            }
        }
    }
    
    //MARK: - Notifications
    func createObserver(userId: Int) {
        /*var notificationsCount: String?
        guard let firebase_instance = SocialNetworkConstant.shared.instance else {
            debugPrint("ProspectosInteractor error: firebase instance was nil.")
            return
        }
        
        let fireStore = Firestore.firestore(app: firebase_instance)
        listener = fireStore.collection("user")
            .document(String(userId))
            .collection("notifications").addSnapshotListener { (snapshotListener, error) in
                guard let snapshotListener = snapshotListener else { return }
                guard let documents = (snapshotListener as NSObject).value(forKey: "documents") as? NSArray else { return }
                notificationsCount = documents.count > 0 ? String(documents.count) : nil
                self.presenter?.didFinishGettingNotifications(notificationsCount: notificationsCount)
            }*/
    }
    
    /*deinit {
        listener?.remove()
    }*/
    
    //MARK: - Watch
    func watchPost(postId: Int) {
        let params = PublicationsWatch(post_id: postId,
                                       FIIDEMPLEADO: SocialNetworkConstant.shared.userId)
        
        let request = snService.getRequestWP(method: .publicationsWatch, params: params)
        snService.makeRequest(request: request) { (data, error) in

        }
    }
    
}
