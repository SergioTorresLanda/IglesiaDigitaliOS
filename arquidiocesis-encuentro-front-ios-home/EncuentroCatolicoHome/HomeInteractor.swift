//
//  HomeInteractor.swift
//  EncuentroCatolicoHome
//
//  Created Diego Martinez on 23/02/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import EncuentroCatolicoNews

class HomeInteractor: HomeInteractorProtocol {
    
    weak var presenter: HomePresenterProtocol?
    let  tksession = UserDefaults.standard.string(forKey: "idToken")
    func cargarDatosPersona() {
        guard let endpoint: URL = URL(string: "\(APIType.shared.Auth())/user/info") else {
            print("Error formando url")
            self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorInterno, user: nil)
            return
        }
        
        var request = URLRequest(url: endpoint)
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
        request.httpMethod = "POST"
        
        guard let cuerpo: Data = try? JSONEncoder().encode(cargarInfoUserDefault()) else {
            self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorInterno, user: nil)
            return
        }
        
        request.httpBody = cuerpo
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            print("-->>  Services class: ", String(describing: type(of: self)))
            print("->  respuesta Status Code: ", response as Any)
            print("->  error: ", error as Any)

            if error != nil {
                return
            }
            
            if (response as! HTTPURLResponse).statusCode == 200 {
                let userHome: UserRespHome? = try? JSONDecoder().decode(UserRespHome.self, from: data!)
                
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.Ok, user: userHome)
                
            } else if (response as! HTTPURLResponse).statusCode == 401 {
                APIType.shared.refreshToken()
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorServidor, user: nil)
                
            } else {
                //let resp = try? JSONDecoder().decode([String:String].self, from: data!)
                
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorServidor, user: nil)
            }
            
        }
        tarea.resume()
        
    }
    
    
    private func cargarInfoUserDefault() -> UserHome {
        let userDefaults = UserDefaults.standard
        let email = userDefaults.string(forKey: "email") ?? ""
        return UserHome(username: email)
    }
    
    func getUserDetail() {
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        print(idUser)
//        guard let endpoint: URL = URL(string: "https://auth.arquidiocesis.mx/user/detail/\(idUser)") else {
        guard let endpoint: URL = URL(string: "\(APIType.shared.Auth())/user/detail/\(idUser)") else {
            print("Error formando url")
            return
        }
        
        var request = URLRequest(url: endpoint)
        
        request.httpMethod = "GET"
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \( tksession ?? "" ?? "")", forHTTPHeaderField: "Authorization")
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            print("-->>  Services class: ", String(describing: type(of: self)))
            print("->  respuesta Status Code: ", response as Any)
            print("->  error: ", error as Any)

            if error != nil {
                print("Hubo un error")
                return
            }
            
            do {
                
                if data != nil {
                    let contResponse : ProfileDetailImgH = try JSONDecoder().decode(ProfileDetailImgH.self, from: data!)
                    print("Hola desde el reposne nuevo", contResponse)
                    print(response)
                    self.presenter?.responseGetProfile(responseCode: response as! HTTPURLResponse, dataResponse: contResponse)
                }
                
            }catch{
                print("error al obtener detalle del usuario", error.localizedDescription)
                APIType.shared.refreshToken()
            }
            
        }
        tarea.resume()
    }
    
    // MARK: NEW HOME SERVICES -
    //2021-12-12
    func getSaintOfDay(type: String, date: String) {
//        guard let apiURL = URL(string: "https://api-develop.arquidiocesis.mx/home?type=\(type)&starting_date=\(date)") else { return }
        guard let apiURL = URL(string: "\(APIType.shared.User())/home?type=\(type)&starting_date=\(date)") else { return }
        var request = URLRequest(url: apiURL)
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        request.httpMethod = "GET"
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("\(idUser)", forHTTPHeaderField: "X-User-Id")
        
        let work = URLSession.shared.dataTask(with: request) { data, response, error in
            print("->  respuesta Status Code: ", response as Any)
            print("->  error: ", error as Any)

            do{
                
                let contentResponse = try JSONDecoder().decode([HomeSaintOfDay].self, from: data!)
                self.presenter?.trasportResponseHome(response: (response as! HTTPURLResponse), data: contentResponse, type: type)
                
            }catch{
                print("Download new home data error", error.localizedDescription, error)
                APIType.shared.refreshToken()
            }
        }
        work.resume()
    }
    
    func getSuggestions(type: String) {
//        guard let apiURL = URL(string: "https://api-develop.arquidiocesis.mx/home?type=\(type)") else { return }
        guard let apiURL = URL(string: "\(APIType.shared.User())/home?type=\(type)") else { return }
        var request = URLRequest(url: apiURL)
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        
        request.httpMethod = "GET"
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("\(idUser)", forHTTPHeaderField: "X-User-Id")
        
        let work = URLSession.shared.dataTask(with: request) { data, response, error in
            print("->  respuesta Status Code: ", response as Any)
            print("->  error: ", error as Any)

            do{
                
                let contentResponse = try JSONDecoder().decode([HomeSuggestions].self, from: data!)
                self.presenter?.transportResponseSuggestions(response: (response as! HTTPURLResponse), data: contentResponse)
                
            }catch{
                print("Download new home suggestions error", error.localizedDescription, error)
                APIType.shared.refreshToken()
            }
        }
        work.resume()
        
    }
    
    // MARK: STREAMING SERVICE -
    func requestSrtreaming() {
//        guard let apiURL: URL = URL(string: "https://api-develop.arquidiocesis.mx/streaming") else { return }
        guard let apiURL: URL = URL(string: "\(APIType.shared.User())/streaming") else { return }
        var request = URLRequest(url: apiURL)
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpMethod = "GET"
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            print("-->>  Services class: ", String(describing: type(of: self)))
            print("->  respuesta Status Code: ", response as Any)
            print("->  error: ", error as Any)

            if error != nil {
                print("Hubo un error")
                return
            }
            
            do {
                
                let resp = try JSONSerialization.jsonObject(with: data!, options: .allowFragments)
                let contentResponse : [LiveModel] = try JSONDecoder().decode([LiveModel].self, from: data!)
                print(resp)
                self.presenter?.onSuccessStreaming(data: contentResponse, response: (response as! HTTPURLResponse))
                
            }catch{
                print("error", error.localizedDescription)
                APIType.shared.refreshToken()
                self.presenter?.onFailStreaming(message: error)
            }
            
        }
        
        tarea.resume()
    }
    
}

