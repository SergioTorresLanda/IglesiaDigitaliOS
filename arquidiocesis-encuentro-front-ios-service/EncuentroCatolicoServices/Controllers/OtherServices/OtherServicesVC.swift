//
//  OtherServicesViewController.swift
//  EncuentroCatolicoServices
//
//  Created Desarrollo on 22/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import EncuentroCatolicoVirtualLibrary

class OtherServicesViewController: UIViewController, OtherServicesViewProtocol {
    
    @IBOutlet weak var table            : UITableView!
    @IBOutlet weak var notificationView : UIView!
    @IBOutlet weak var customNavBar: UIView!
    
    var presenter: OtherServicesPresenterProtocol?
    var options: Array<otherServicesOptions> = []
    let viewBundle = Bundle.init(identifier: "mx.arquidiocesis.EncuentroCatolicoServices")
    let alert = UIAlertController(title: "", message: "\n \n \n \n \nCargando...", preferredStyle: .alert)
    var celebrations: Array<servicesSubOption> = []
    var blessings: Array<servicesSubOption> = []
    var others: Array<servicesSubOption> = []
    var collepsedCells: Array<Bool> = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        notificationView.isHidden = true
        table.delegate = self
        table.dataSource = self
        table.register(UINib(nibName: "OptionCell", bundle: viewBundle), forCellReuseIdentifier: "optionCell")
        table.register(UINib(nibName: "SubOptionCell", bundle: viewBundle), forCellReuseIdentifier: "subOptionCell")
        options.append(otherServicesOptions(title: "Bendiciones", type: "option"))
        options.append(otherServicesOptions(title: "Otros servicios", type: "option"))
        collepsedCells = [false,false,false]
        showLoading()
        presenter?.getOptions(type: .Bendiciones)
        customNavBar.layer.cornerRadius = 20
        customNavBar.layer.maskedCorners = [.layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        customNavBar.ShadowNavBar()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        print("VC ECServices - OtherServicesVC ")
    }
    
    func addSubOptions(toOption: cases, type: String, optionsToAdd: Array<servicesSubOption>){
        if optionsToAdd.count > 0{
            var index = 0
            switch toOption {
            case .Bendiciones:
                index = options.firstIndex(of: otherServicesOptions(title: "Bendiciones", type: "option"))!
            case .OtrosServicios:
                index = options.firstIndex(of: otherServicesOptions(title: "Otros servicios", type: "option"))!
            }
            var x = 0
            for item in optionsToAdd{
                x += 1
                options.insert(otherServicesOptions(title: item.name, type: type, id: String(item.id), description: item.otherServicesOptionDescription, action: item.action, parent: toOption), at: index + x)
            }
            table.beginUpdates()
            for n in 1...x{
                table.insertRows(at: [IndexPath(row: index + n, section: 0)], with: .automatic)
            }
            table.endUpdates()
        }
    }
    
    func loadOptions(data: [servicesSubOption], type: cases) {
        for item in data{
            switch type {
            case .Bendiciones:
                blessings.append(item)
            case .OtrosServicios:
                others.append(item)
            }
        }
        if type == .Bendiciones{
            presenter?.getOptions(type: .OtrosServicios)
        }
        if type == .OtrosServicios{
            self.alert.dismiss(animated: false, completion: nil)
        }
    }
    
    func showLoading(){
        let imageView = UIImageView(frame: CGRect(x: 100, y: 15, width: 80, height: 80))//mitad es en 145dp
        imageView.image = UIImage(named: "iconoIglesia3", in: viewBundle, compatibleWith: nil)
        alert.view.addSubview(imageView)
        self.present(alert, animated: false, completion: nil)
    }
    
    func mostrarMSG(dtcAlerta: [String : String]) {
        alert.dismiss(animated: false, completion: {
            DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {
                self.alert.dismiss(animated: true, completion: nil)
            })
            let alerta = UIAlertController(title: dtcAlerta["titulo"], message: dtcAlerta["cuerpo"], preferredStyle: .alert)
            alerta.addAction(UIAlertAction(title: "Aceptar", style: .default, handler: nil))
            self.present(alerta, animated: true, completion: nil)
        })
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
}

extension OtherServicesViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return options.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = options[indexPath.row]
        if data.type == "option"{
            let cell = table.dequeueReusableCell(withIdentifier: "optionCell") as! OptionCell
            cell.lblTitle.text = data.title
            cell.accessibilityLabel = data.title
            var collapsedIndex = 0
            switch data.title {
            case "Bendiciones":
                collapsedIndex = 1
            case "Otros servicios":
                collapsedIndex = 2
            default:
                print("Defaul case")
            }
            if collepsedCells[collapsedIndex] == false{
                cell.imgView.image = UIImage(named: "arrowDown", in: viewBundle, compatibleWith: nil)
            }else{
                cell.imgView.image = UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil)
            }
            return cell
        }else{
            let cell = table.dequeueReusableCell(withIdentifier: "subOptionCell") as! SubOptionCell
            cell.lblTitle.text = data.title
            cell.tag = Int(data.id ?? "-1") ?? -1
            cell.accessibilityHint = data.description
            cell.accessibilityValue = data.action
            if data.type == "arrowOption"{
                cell.imgView?.isHidden = false
            }else{
                cell.imgView.isHidden = true
            }
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = table.cellForRow(at: indexPath)!
        if cell.accessibilityLabel == "Celebraciones"{
            let optionCell = cell as! OptionCell
            if  optionCell.imgView.image == UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil){
                collepsedCells[0] = false
                optionCell.imgView.image = UIImage(named: "arrowDown", in: viewBundle, compatibleWith: nil)
                notificationView.isHidden = true
                let range = options.firstIndex(of: otherServicesOptions(title: "Bendiciones", type: "option"))!
                options.removeSubrange(1..<range)
                self.table.reloadData()
            }else{
                collepsedCells[0] = true
                optionCell.imgView.image = UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil)
            }
        }
        else if cell.accessibilityLabel == "Bendiciones"{
            let optionCell = cell as! OptionCell
            if optionCell.imgView.image ==  UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil){
                collepsedCells[1] = false
                optionCell.imgView.image = UIImage(named: "arrowDown", in: viewBundle, compatibleWith: nil)
                let range = options.firstIndex(of: otherServicesOptions(title: "Otros servicios", type: "option"))!
                options.removeSubrange((indexPath.row + 1)..<(range))
                self.table.reloadData()
            }else{
                if optionCell.lblTitle.text == "Bendiciones"{
                collepsedCells[1] = true
                optionCell.imgView.image = UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil)
                addSubOptions(toOption: .Bendiciones, type: "arrowOption", optionsToAdd: blessings)
                }
            }
        }
        else if cell.accessibilityLabel == "Otros servicios"{
            let optionCell = cell as! OptionCell
            if  optionCell.imgView.image == UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil){
                collepsedCells[2] = false
                optionCell.imgView.image = UIImage(named: "arrowDown", in: viewBundle, compatibleWith: nil)
                options.removeSubrange(indexPath.row + 1..<options.count)
                self.table.reloadData()
            }else{
                collepsedCells[2] = true
                optionCell.imgView.image = UIImage(named: "arrowUp", in: viewBundle, compatibleWith: nil)
                addSubOptions(toOption: .OtrosServicios, type: "arrowOption", optionsToAdd: others)
            }
        }
        else{
            //HOME SERVICE BENDICIONES A CASA
            //comunion enfermos
            switch options[indexPath.row].action{
            case "NONE":
                let alert = AlertOneButtonViewController.showAlert(titulo: options[indexPath.row].title, mensaje: options[indexPath.row].description ?? "")
                alert.presentartAlerta(en: self)
            break
            case "FORM_COMMUNION_OF_SICK":
               UserDefaults.standard.setValue(true, forKey: "DetailView")
                let view = DetailServiceWireFrame.createModule()
                self.navigationController?.pushViewController(view, animated: true)
                break
            case "FORM_BLESSING_HOME":
                UserDefaults.standard.setValue(false, forKey: "DetailView")
                let view = DetailServiceWireFrame.createModule()
                self.navigationController?.pushViewController(view, animated: true)
                break
            case .some(_):
                let alert = AlertOneButtonViewController.showAlert(titulo: options[indexPath.row].title, mensaje: options[indexPath.row].description ?? "")
                alert.presentartAlerta(en: self)
            break
            case .none:
                break
            }
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75.0
    }
}
