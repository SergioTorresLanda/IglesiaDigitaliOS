//
//  FeedInteractor.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Miguel Angel Vicario Flores on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Alamofire
import RealmSwift

public struct PublicationsAll: Codable {
    let dateEnd: Int
    let dateInit: Int64
    let skip: Int
    let limit: Int
    let FIIDEMPLEADO: Int
}

public struct Timeline: Codable{
    let userId: String
    let nextPage: String
}

public struct PublicationsWatch: Codable {
    let post_id: Int
    let FIIDEMPLEADO: Int
}

public class FeedInteractor: FeedInteractorProtocol {
    func getDeletePost(str: String) {
        
        callDeleteService(strUrl: str)
    }
    
    func getPersonalDataUser() {
        
    }
    
    
    func callDeleteService(strUrl: String){
        let SNId = UserDefaults.standard.integer(forKey: "SNId")
        let request = snService.deleteRequestRS(strURL: strUrl, method: .profile)
        snService.makeRequest(request: request) { (data, error) in
            if let error = error{
                self.presenter?.didFinishGettingPostsWithErrors(error: error)
            }else {
                do{
                    let someDictionaryFromJSON = try JSONSerialization.jsonObject(with: data ?? Data(), options: .allowFragments) as! [String: Any]
                    let jsonDecoder = JSONDecoder()
                    jsonDecoder.keyDecodingStrategy = .convertFromSnakeCase
                    print("JSON::: \(someDictionaryFromJSON)")
                    self.callService(nxtPage: "", userId: "\(SNId)", params: nil, isFromPage: true, isPagination: false, isRefresh: true)
                }catch{
                    print(error)
                }
            }
        }
        
    }
    
    weak var presenter: FeedPresenterProtocol?
    
    //MARK: - Properties
    private var snService = SocialNetworkService()
    
    
    // GGG Timeline
    func getNewPosts(isFromPage: Bool, isRefresh: Bool) {
        let SNId = UserDefaults.standard.integer(forKey: "SNId")
        let params = Timeline(userId: "\(SNId)", nextPage: "")
        self.callService(nxtPage: "", userId: "\(SNId)", params: params, isFromPage: isFromPage, isPagination: false, isRefresh: isRefresh)
    }
    
    func getNewPostPagin(isFromPage: Bool, posts: [Posts], nxtPag: String) {
        let SNId = UserDefaults.standard.integer(forKey: "SNId")
        let params = Timeline(userId: "\(SNId)", nextPage: nxtPag)
        callService(nxtPage: nxtPag, userId: "\(SNId)", params: params, isFromPage: isFromPage, isPagination: true, isRefresh: false)
    }
    
    
    var arPostGral: [Posts] = [Posts]()
    var numPosts = 0
    let SNId = UserDefaults.standard.integer(forKey: "SNId")
    func callService(nxtPage: String?, userId: String, params: Timeline?, isFromPage: Bool, isPagination: Bool, isRefresh: Bool){
        print(":::::::: CALL SERVICE ;;;;;;;;;;")
        let stUrl = "\(APIType.shared.SN())/users/\(SNId)/timeline"
        var request = snService.getRequestRS(strUrl: stUrl, pagination: nxtPage ?? "", method: .publicationsAll, params: params)
        request.timeoutInterval = 20
        snService.makeRequest(request: request) { (data, error) in
            if let error = error{
                DispatchQueue.main.asyncAfter(deadline: .now() + 3, execute: {
                    print("::::ERROR CALL SERVICE::: "+error.message)
                })
                self.presenter?.didFinishGettingPostsWithErrors(error: error)
            }else{
                do {
                    if isRefresh{
                        self.numPosts = 0
                        UserDefaults.standard.removeObject(forKey: "nextPageTL")
                        self.arPostGral = []
                    }
                    if isPagination{
                        self.numPosts = 0
                    }
                    if !isFromPage{
                        UserDefaults.standard.removeObject(forKey: "nextPageTL")
                    }
                    let someDictionaryFromJSON = try JSONSerialization.jsonObject(with: data ?? Data(), options: .allowFragments) as! [String: Any]
                    let jsonDecoder = JSONDecoder()
                    jsonDecoder.keyDecodingStrategy = .convertFromSnakeCase
                    guard let allData = data else { return }
                    let responseModel = try jsonDecoder.decode(RSTimeLine.self, from: allData)
                    let arr = responseModel.result?.posts
                    let dctResult = someDictionaryFromJSON["result"] as? [String: Any]
                    let dctPagination = dctResult?["pagination"] as? [String: Any]
                    let hasMore = false //dctPagination?["hasMore"] as? Bool
                    let stNextPag = dctPagination?["next"] as? String
                    if hasMore && self.numPosts < 5{
                        self.numPosts += 1
                        if let arr = arr{
                            for postss in arr{
                                self.arPostGral.append(postss)
                            }
                        }
                        
                        self.callService(nxtPage: stNextPag, userId: "\(self.SNId)", params: nil, isFromPage: isFromPage, isPagination: false, isRefresh: false)
                    }else{
                        if let arr = arr{
                            for postss in arr{
                                self.arPostGral.append(postss)
                            }
                        }
                        UserDefaults.standard.set(nxtPage, forKey: "nextPageTL")
                        self.presenter?.didFinishGettingPosts(isFromPage: isFromPage, posts: self.arPostGral)
                    }
                }catch{
                    DispatchQueue.main.asyncAfter(deadline: .now() + 3, execute: {
                        print("::::CATCH CALL SERVICE::: ")
                    })
                    self.presenter?.didFinishGettingPostsWithErrors(error: SocialNetworkErrors.ResponseError)
                }
            }
            
        }
    }
    // GGG Timeline manda a llamar se servicio en interactor
    //MARK: - Posts
    func getPosts(isFromPage: Bool) {
        
        let postsLimit = DefaultsValues.max_length_all_post
        let dateInit = DefaultsValues.date_init_post
        let skip = storedData.skip
        let params = PublicationsAll(dateEnd: Int(NSDate().timeIntervalSince1970 * 1000),
                                     dateInit: dateInit,
                                     skip: skip,
                                     limit: postsLimit,
                                     FIIDEMPLEADO: 100)
        
        let request = snService.getRequestWP(method: .publicationsAll, params: params)
        snService.makeRequest(request: request) { (data, error) in
            if let error = error {
                self.presenter?.didFinishGettingPostsWithErrors(error: error)
            } else {
                do {
                    guard let allData = data else { return }
                    let realm = try Realm()
                    let json = try JSONSerialization.jsonObject(with: allData, options: .fragmentsAllowed) as? [String: Any]
                    guard let publications = json?["publications"] as? [[String : Any]],
                          let pages = json?["pages"] as? Int else {
                              self.presenter?.didFinishGettingPostsWithErrors(error: SocialNetworkErrors.ResponseError)
                              return
                          }
                    
                    storedData.pages = pages
                    
                    let publicationsData = try JSONSerialization.data(withJSONObject: publications, options: .fragmentsAllowed)
                    let result = try JSONDecoder().decode(PublicationsRealm.self, from: publicationsData)
                    
                    try result.forEach { (publication) in
                        if let location = publication.location, let image = location.imgLocation, image != "", publication.mediaList.isEmpty {
                            let media = MediaRealm()
                            media.id = location.id
                            media.url = image
                            media.mimeType = "image/location"
                            try realm.write {
                                publication.mediaList.append(media)
                            }
                        }
                    }
                    
                    RealmManager.addToDataBase(result)
                    self.presenter?.didFinishGettingPosts(isFromPage: isFromPage, posts: [])
                    
                } catch {
                    self.presenter?.didFinishGettingPostsWithErrors(error: SocialNetworkErrors.ResponseError)
                }
            }
        }
    }
    
    //MARK: - Notifications
    func createObserver(userId: Int) {
        /*var notificationsCount: String?
         guard let firebase_instance = SocialNetworkConstant.shared.instance else {
         debugPrint("ProspectosInteractor error: firebase instance was nil.")
         return
         }
         
         let fireStore = Firestore.firestore(app: firebase_instance)
         listener = fireStore.collection("user")
         .document(String(userId))
         .collection("notifications").addSnapshotListener { (snapshotListener, error) in
         guard let snapshotListener = snapshotListener else { return }
         guard let documents = (snapshotListener as NSObject).value(forKey: "documents") as? NSArray else { return }
         notificationsCount = documents.count > 0 ? String(documents.count) : nil
         self.presenter?.didFinishGettingNotifications(notificationsCount: notificationsCount)
         }*/
    }
    
    /*deinit {
     listener?.remove()
     }*/
    
    //MARK: - Watch
    func watchPost(postId: Int) {
        let params = PublicationsWatch(post_id: postId,
                                       FIIDEMPLEADO: SocialNetworkConstant.shared.userId)
        
        let request = snService.getRequestWP(method: .publicationsWatch, params: params)
        snService.makeRequest(request: request) { (data, error) in
            
        }
    }
    
}
