//
//  HomeInteractor.swift
//  EncuentroCatolicoHome
//
//  Created Diego Martinez on 23/02/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import EncuentroCatolicoNews

class HomeInteractor: HomeInteractorProtocol {
    
    weak var presenter: HomePresenterProtocol?
    let  tksession = UserDefaults.standard.string(forKey: "idToken") ?? ""
    
    func cargarDatosPersona() {
        print("Llego a XXX200")
        guard let endpoint: URL = URL(string: "\(APIType.shared.Auth())/user/info") else {
            print("Error formando url")
            self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorInterno, user: nil)
            return
        }
        print("Llego a XXX20")
        var request = URLRequest(url: endpoint)
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(tksession)", forHTTPHeaderField: "Authorization")
        request.httpMethod = "POST"
        
        guard let cuerpo: Data = try? JSONEncoder().encode(cargarInfoUserDefault()) else {
            print("Error XXX21")
            self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorInterno, user: nil)
            return
        }
        request.httpBody = cuerpo
        request.timeoutInterval = 60
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            //print("->  respuesta Status Code: ", response as Any)
            //print("->  error: ", error as Any)
            if error != nil {
                print("Error XXX22::")
                print(error.debugDescription)
                return
            }
            print("TS 1::")
            //print(self.tksession)
            print("DATA 333:")
            let responseData = String(data: data!, encoding: String.Encoding.utf8)
                                print(responseData!)
            print("STATUS CODE:")
            print((response as! HTTPURLResponse).statusCode)
            if (response as! HTTPURLResponse).statusCode == 200 {
                guard let allData = data else { return }
                let userHome: UserRespHome? = try? JSONDecoder().decode(UserRespHome.self, from: allData)
                
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.Ok, user: userHome)
                
            } else if (response as! HTTPURLResponse).statusCode == 401 {
                APIType.shared.refreshToken()
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorServidor, user: nil)
                
            } else {
                self.presenter?.obtieneRespuetaUsuario(errores: ErroresServidorHome.ErrorServidor, user: nil)
            }
            
        }
        tarea.resume()
        
    }
    
    
    private func cargarInfoUserDefault() -> UserHome {
        let userDefaults = UserDefaults.standard
        let email = userDefaults.string(forKey: "email") ?? ""
        return UserHome(username: email)
    }
    
    func getUserDetail() {
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        print(idUser)
//        guard let endpoint: URL = URL(string: "https://auth.arquidiocesis.mx/user/detail/\(idUser)") else {
        guard let endpoint: URL = URL(string: "\(APIType.shared.Auth())/user/detail/\(idUser)") else {
            print("Error formando url")
            return
        }
        
        var request = URLRequest(url: endpoint)
        
        request.httpMethod = "GET"
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \( tksession )", forHTTPHeaderField: "Authorization")
        print("TS 2::")
        //print(tksession)
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            guard data != nil else {
                return
            }
            //let responseServer = try! JSONSerialization.jsonObject(with: model, options: []) as? NSDictionary
            //print("->  responseServer: ", responseServer as Any)
            if error != nil {
                print("Hubo un error 059")
                return
            }
            
            do {
                if data != nil {
                    let contResponse : ProfileDetailImgH = try JSONDecoder().decode(ProfileDetailImgH.self, from: data!)
                    self.presenter?.responseGetProfile(responseCode: response as! HTTPURLResponse, dataResponse: contResponse)
                }
            }catch{
                print("error al obtener detalle del usuario", error.localizedDescription)
                APIType.shared.refreshToken()
            }
            
        }
        tarea.resume()
    }
    
    // MARK: NEW HOME SERVICES -
    //2021-12-12
    func getSaintOfDay(type: String, date: String) {
//        guard let apiURL = URL(string: "https://api-develop.arquidiocesis.mx/home?type=\(type)&starting_date=\(date)") else { return }
        guard let apiURL = URL(string: "\(APIType.shared.User())/home?type=\(type)&starting_date=\(date)") else { return }
        var request = URLRequest(url: apiURL)
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        request.httpMethod = "GET"
        request.setValue("Bearer \( tksession )", forHTTPHeaderField: "Authorization")
        request.setValue("\(idUser)", forHTTPHeaderField: "X-User-Id")
        print("TS 3::")
        //print(tksession)
        let work = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let datamodel = data else{
                return
            }
         
                if(type=="SAINT"){
                    print("ENDPOINT SAINT::")
                    print()
                    do{
                        let cR = try JSONDecoder().decode([HomePosts].self, from: datamodel)
                        self.presenter?.trasportResponseHome(response: (response as! HTTPURLResponse), data: cR)
                    }catch{
                        self.presenter?.onFailCarrusel(type: "SAINT")
                        print("Download new home data error", error.localizedDescription, error)
                        APIType.shared.refreshToken()
                    }
                }else{
                    print("ENDPOINT POSTS::")
                    let responseData = String(data: data!, encoding: String.Encoding.utf8)
                    print(responseData!)
                    print(apiURL.absoluteString)
                    do{
                        let cR = try JSONDecoder().decode([HomePosts].self, from: datamodel)
                        self.presenter?.transportResponsePosts(response: (response as! HTTPURLResponse), data: cR)
                    }catch{
                        self.presenter?.onFailCarrusel(type: "POST")
                        print("Download new home data error", error.localizedDescription, error)
                        APIType.shared.refreshToken()
                    }
                }
         
        }
        work.resume()
    }
    
    func getSuggestions(type: String) {
//        guard let apiURL = URL(string: "https://api-develop.arquidiocesis.mx/home?type=\(type)") else { return }
        guard let apiURL = URL(string: "\(APIType.shared.User())/home?type=\(type)") else { return }
        var request = URLRequest(url: apiURL)
        
        let defaults = UserDefaults.standard
        let idUser = defaults.integer(forKey: "id")
        
        request.httpMethod = "GET"
        request.setValue("Bearer \( tksession )", forHTTPHeaderField: "Authorization")
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("\(idUser)", forHTTPHeaderField: "X-User-Id")
        
        let work = URLSession.shared.dataTask(with: request) { data, response, error in
            //print("->  respuesta Status Code: ", response as Any)
            //print("->  error: ", error as Any)
            guard let allData = data else { return }
            do{
                
                let contentResponse = try JSONDecoder().decode([HomeSuggestions].self, from: allData)
                self.presenter?.transportResponseSuggestions(response: (response as! HTTPURLResponse), data: contentResponse)
                
            }catch{
                self.presenter?.onFailCarrusel(type: "SUGG")
                print("Download new home suggestions error", error.localizedDescription, error)
                APIType.shared.refreshToken()
            }
        }
        work.resume()
        
    }
    
    // MARK: STREAMING SERVICE -
    func requestSrtreaming() {
//        guard let apiURL: URL = URL(string: "https://api-develop.arquidiocesis.mx/streaming") else { return }
        guard let apiURL: URL = URL(string: "\(APIType.shared.User())/streaming") else { return }
        var request = URLRequest(url: apiURL)
        request.setValue("Bearer \( tksession )", forHTTPHeaderField: "Authorization")
//        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpMethod = "GET"
        request.timeoutInterval = 40
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
            //print("->  respuesta Status Code: ", response as Any)
            //print("->  error: ", error as Any)
            if error != nil {
                print("Hubo un error 058:;")
                print(error.debugDescription)
                print(error!.localizedDescription)
                return
            }
            
            do {
                guard let allData = data else { return }
                let resp = try JSONSerialization.jsonObject(with: allData, options: .allowFragments)
                let contentResponse : [LiveModel] = try JSONDecoder().decode([LiveModel].self, from: allData)
                print(resp)
                self.presenter?.onSuccessStreaming(data: contentResponse, response: (response as! HTTPURLResponse))
                
            }catch{
                print("error", error.localizedDescription)
                APIType.shared.refreshToken()
                self.presenter?.onFailStreaming(message: error)
            }
            
        }
        
        tarea.resume()
    }
    
}

