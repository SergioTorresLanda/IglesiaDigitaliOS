//
//  CreatePostPresenter.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Diego Martinez on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

public class CreatePostPresenter: CreatePostPresenterProtocol {
    
    func editMakePost(content: String, media: [MediaData], organizationID: Int, statusId: Int, editPost: Bool, postId: Int) {
        interactor?.editMakePost(content: content, media: media, organizationID: organizationID, statusId: statusId, editPost: editPost, postId: postId)
    }
    
    func newmakePost(content: String, location: LocationsResult?, feeling: FeelingsResult?, media: [MediaData], organizationId: Int?, asParam: Int, editPost: Bool, scope: Int) {
        
        interactor?.newmakePost(content: content, location: location, feeling: feeling, media: media, organizationId: organizationId, asParam: asParam, editPost: editPost, scope: scope)
    }
    

    weak private var view: CreatePostViewProtocol?
    var interactor: CreatePostInteractorProtocol?
    private let router: CreatePostWireframeProtocol

    init(interface: CreatePostViewProtocol, interactor: CreatePostInteractorProtocol?, router: CreatePostWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    //MARK: - Post
    func makePost(content: String, location: LocationsResult?, feeling: FeelingsResult?, media: [MediaData], organizationId: Int,
                  asParam: String) {
        
        interactor?.makePost(content: content, location: location, feeling: feeling, media: media, organizationId: organizationId,
        asParam: asParam)
    }
    
    func didFinishMakingPost() {
        view?.didFinishMakingPost()
    }
    
    func didFinishMakingPostWithErrors(error: SocialNetworkErrors) {
        view?.didFinishMakingPostWithErrors(error: error)
    }
    
    // MARK: RELATIONS -
    func requestRelations(SNId: Int) {
        interactor?.getRelations(SNId: SNId)
    }
    
    func onSuccessGetRelations(data: RelationsData, response: HTTPURLResponse) {
        DispatchQueue.main.async {
            if response.statusCode == 200 {
                self.view?.successGetRelations(data: data)
            }else{
                self.view?.failGetRelations(mesage: "Error code")
            }
        }
    }
    
    func onFailGetRelation(error: Error) {
        DispatchQueue.main.async {
            self.view?.failGetRelations(mesage: error.localizedDescription)
        }
    }
}

extension CreatePostPresenter {
    func editComment(idComment: Int, commentString: String) {
        interactor?.editComment(idComment: idComment, commentContent: commentString)
    }
    
    func onSuccessEditComment(data: ResultEditComment, response: HTTPURLResponse) {
        DispatchQueue.main.async {
            if response.statusCode == 200 {
                self.view?.successEditComment(data: data)
            }else{
                self.view?.failEditComment(message: "Status code != 200")
            }
        }
    }
    
    func onFailEditComment(error: Error) {
        self.view?.failEditComment(message: error.localizedDescription)
    }

}
