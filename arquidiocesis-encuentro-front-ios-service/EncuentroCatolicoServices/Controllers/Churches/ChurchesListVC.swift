//
//  ChurchesListViewController.swift
//  EncuentroCatolicoServices
//
//  Created Desarrollo on 23/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import MapKit
import CoreLocation

class ChurchesListViewController: UIViewController, ChurchesListViewProtocol, CLLocationManagerDelegate {
    
    @IBOutlet weak var collection: UICollectionView!
    var tableData: ChurchLocations = []
    var presenter: ChurchesListPresenterProtocol?
    let viewBundle = Bundle.init(identifier: "mx.arquidiocesis.EncuentroCatolicoServices")
    var images: [Int:UIImage] = [:]
    let alert = UIAlertController(title: "", message: "\n \n \n \n \nCargando...", preferredStyle: .alert)
    let locationManager = CLLocationManager()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        collection.delegate = self
        collection.dataSource = self
        collection.register(UINib(nibName: "ChurchCellCVC", bundle: viewBundle), forCellWithReuseIdentifier: "cell")
        if (CLLocationManager.locationServicesEnabled()) {
            locationManager.delegate = self
            locationManager.desiredAccuracy = kCLLocationAccuracyBest
            locationManager.requestWhenInUseAuthorization()
            locationManager.startUpdatingLocation()
        } 
    }
    
    override func viewWillAppear(_ animated: Bool) {
        print("VC ECServices - ChurchesListVC ")

    }

    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        locationManager.startUpdatingLocation()
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let locationArray = locations as NSArray
        let locationObj = locationArray.lastObject as! CLLocation
        let coord = locationObj.coordinate
        alert.dismiss(animated: false, completion: { [self] in
            showLoading()
        })
        presenter?.getChurches(requestType: "SERVICES", latitude: Double(coord.latitude), longitude: Double(coord.longitude))
    }
    
    func showLoading(){
        let imageView = UIImageView(frame: CGRect(x: 100, y: 15, width: 80, height: 80))//mitad es en 145dp
        imageView.image = UIImage(named: "iconoIglesia3", in: viewBundle, compatibleWith: nil)
        alert.view.addSubview(imageView)
        self.present(alert, animated: false, completion: nil)
    }
    
    func mostrarMSG(dtcAlerta: [String : String]) {
        alert.dismiss(animated: false, completion: {
            let alerta = UIAlertController(title: dtcAlerta["titulo"], message: dtcAlerta["cuerpo"], preferredStyle: .alert)
            alerta.addAction(UIAlertAction(title: "Aceptar", style: .default, handler: nil))
            self.present(alerta, animated: true, completion: nil)
        })
    }
    
    func loadChurches(data: ChurchLocations) {
        tableData.removeAll()
        tableData = data
        alert.dismiss(animated: false, completion: nil)
        DispatchQueue.main.async {
            var imagesToDownload = self.tableData.count
            if imagesToDownload > 15{
                imagesToDownload = 15
            }
            for item in 0..<imagesToDownload{
                let dataForIndex = self.tableData[item]
                var image = UIImage(named: "noData", in: Bundle.local, compatibleWith: nil)
                let url = URL(string: dataForIndex.imageURL ?? "www.com")
                let imgData = try? Data(contentsOf: url!)
                if imgData != nil {
                    image = UIImage(data: imgData!)
                }
                self.images.updateValue(image!, forKey: item)
            }
        }
        self.collection.reloadData()
        alert.dismiss(animated: false, completion: nil)
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension ChurchesListViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return tableData.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collection.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! ChurchCellCVC
        let data = tableData[indexPath.row]
        cell.layer.cornerRadius = 10
        cell.lblTitle.text = data.name
        cell.lblAddress.text = data.address
        cell.lblDistance.text = "\(data.distance) m"
        
        if images[indexPath.row] != nil{
            let image = images[indexPath.row]
            cell.imgView.image = image
        }else{
            let url = URL(string: data.imageURL ?? "www.com")
            let imgData = try? Data(contentsOf: url!)
            if imgData != nil {
                cell.imgView.image = UIImage(data: imgData!)
            }else{
                cell.imgView.image = UIImage(named: "noData", in: Bundle.local, compatibleWith: nil)
            }
            images.updateValue(cell.imgView.image!, forKey: indexPath.row)
        }
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (self.collection.bounds.width - 32.0), height: 100.0)
    }
}
