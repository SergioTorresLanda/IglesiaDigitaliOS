//
//  FeedViewController.swift
//  zeus-ios-sdk-new-social-network
//
//  Created Miguel Angel Vicario Flores on 01/09/20.
//  Copyright © 2020 Gabriel Briseño. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift

public class FeedViewController: UIViewController, FeedViewProtocol {
    
    var presenter: FeedPresenterProtocol?
    
    //MARK: - @IBoutlets
    @IBOutlet public weak var notificationView: UIView!
    @IBOutlet public weak var tableView: UITableView! {
        didSet { tableView.tableFooterView = UIView() }
    }
    
    @IBOutlet public weak var notificationImage: UIImageView!  = {
        let imageView = UIImageView()
        imageView.image = "Notification".getImage()
        
        return imageView
    }()
    
    //MARK: - Properties
    private let refreshControl = UIRefreshControl()
    public var isPrefetching = false
    private let shimmer = Shimmer()
    
    public var posts: [PublicationRealm]? {
        didSet { tableView.reloadData() }
    }
    
    //MARK: - Life cycle
    override public func viewDidLoad() {
        super.viewDidLoad()
        setUpView()
    }
    
    override public func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let tabBar = self.tabBarController as? SocialNetworkController
        tabBar?.tabBar.isHidden = true
        tabBar?.customTabBar.isHidden = false
    }
    
    override public func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        tableView.reloadData()
    }
    
    //MARK: - Methods
    private func setUpView() {
        
        NotificationCenter.default.addObserver(self, selector: #selector(self.methodOfReceivedNotification(notification:)), name: Notification.Name("NotificationFeed"), object: nil)
        
        shimmer.startLoader(view: self.view, rows: [50, 140, 380, 120, 220])
        
        self.presenter?.getPosts(isFromPage: false)
        self.presenter?.createObserver(userId: SocialNetworkConstant.shared.userId)
        
        
        refreshControl.addTarget(self, action: #selector(refresh(_:)), for: .valueChanged)
        tableView.addSubview(refreshControl)
        
        tableView.prefetchDataSource = self
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "FeedTVC", bundle: Bundle.local), forCellReuseIdentifier: "FeedTVC")
        
    }
    
    
    @objc func methodOfReceivedNotification(notification: Notification) {
        tableView.setContentOffset(.zero, animated: true)
    }
    
    @objc func refresh(_ sender: UIRefreshControl) {
        storedData.skip = 0
        presenter?.getPosts(isFromPage: false)
        shimmer.startLoader(view: self.view, rows: [50, 140, 380, 120, 220])
    }
    
    func didFinishGettingPosts(isFromPage: Bool) {
        if isFromPage {
            isPrefetching = false
        } else {
            refreshControl.endRefreshing()
            shimmer.stopLoader()
        }
        
        posts = retrieveFromRealm()
    }
    
    func didFinishGettingPostsWithErrors(error: SocialNetworkErrors) {
        posts = retrieveFromRealm()
        refreshControl.endRefreshing()
        shimmer.stopLoader()
    }
    
    func didFinishGettingNotifications(notificationsCount: String?) {
        notificationView.addbadge(text: notificationsCount)
    }
    
    private func retrieveFromRealm() -> [PublicationRealm]? {
        let results = RealmManager.fetchDataSorted(object: PublicationRealm.self)
        return results
    }
    
    //MARK: - Actions
    @IBAction private func popView(_ sender: UIButton) {
        self.tabBarController?.navigationController?.popToRootViewController(animated: true)
        RealmManager.clearDataBase()
    }
    
    @IBAction private func showNotifications(_ sender: UIButton) {
        let vc = NotificationsRouter.createModule()
        vc.modalPresentationStyle = .fullScreen
        self.present(vc, animated: true)
    }
}

