//
//  ScheduleMassTimePresenter.swift
//  EncuentroCatolicoServices
//
//  Created Desarrollo on 28/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ScheduleMassTimePresenter: ScheduleMassTimePresenterProtocol {

    weak private var view: ScheduleMassTimeViewProtocol?
    var interactor: ScheduleMassTimeInteractorProtocol?
    private let router: ScheduleMassTimeWireframeProtocol

    init(interface: ScheduleMassTimeViewProtocol, interactor: ScheduleMassTimeInteractorProtocol?, router: ScheduleMassTimeWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func sendService(date: String, hour: String, description: String, location: Int, service_id: Int, mention_from: String) {
        interactor?.sendService(date: date, hour: hour, description: description, location: location, service_id: service_id, mention_from: mention_from)
    }
    
    func getResponse(errores: ServerErrors, data: ServicesResponse?) {
        DispatchQueue.main.async {
            switch errores {
            case .ErrorInterno:
                let msg = ["titulo":"Error", "cuerpo": "Error en el servidor"]
                self.view?.mostrarMSG(dtcAlerta: msg)
            case .ErrorServidor:
                let msg = ["titulo":"Error", "cuerpo": "Error en la aplicación"]
                self.view?.mostrarMSG(dtcAlerta: msg)
            case .OK:
                guard let data = data else {
                    return
                }
                self.view?.loadResult(data: data)
            }
        }
    }
    
    func requestCatalogIntentions() {
        interactor?.getCatalog()
    }
    
    func succesGetCatalog(data: [CatalogIntentions]) {
        DispatchQueue.main.async {
            self.view?.succesCatalog(data: data)
        }
    }
    
    func failGetCatalgo() {
        DispatchQueue.main.async {
            self.view?.failCatalog()
        }
    }
    
    func requestGetHours(locationID: String, dateStr: String) {
        interactor?.getListIntetions(locationID: locationID, dateStr: dateStr)
    }
    
    func successGetHours(data: [ListIntentions2]) {
        DispatchQueue.main.async {
            self.view?.successHours(data: data)
        }
    }
    
    func failGetHours() {
        DispatchQueue.main.async {
            self.view?.failHours()
        }
    }
    
    func nextFlowPayment(){
        router.nextFlowPayment()
    }

}
