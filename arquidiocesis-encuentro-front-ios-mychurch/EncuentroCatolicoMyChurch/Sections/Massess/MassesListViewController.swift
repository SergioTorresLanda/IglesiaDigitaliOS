//
//  MassesListViewController.swift
//  EncuentroCatolicoMyChurch
//
//  Created Desarrollo on 07/05/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MassesListViewController: UIViewController, MassesListViewProtocol {
    
    @IBOutlet weak var collection: UICollectionView!
    
    var presenter: MassesListPresenterProtocol?
    let viewBundle = Bundle.init(identifier: "mx.arquidiocesis.EncuentroCatolicoMyChurch")
    let alert = UIAlertController(title: "", message: "\n \n \n \n \nCargando...", preferredStyle: .alert)
    var tableData: ChurchesMasses = []
    var tempTableData: ChurchesMasses = []
    lazy var searchBarF: UISearchBar = {
        let searchBar:UISearchBar = UISearchBar(frame: CGRect(x: 10, y: 110, width: self.view.frame.width-20, height: self.view.frame.height-20))
        searchBar.searchBarStyle = UISearchBar.Style.prominent
        searchBar.placeholder = "Buscar una iglesia"
        searchBar.sizeToFit()
        searchBar.isTranslucent = false
        searchBar.backgroundImage = UIImage()
        searchBar.delegate = self
        searchBar.showsCancelButton = true
        let imageView = UIImageView(image: UIImage(named: "Icono_buscar", in: viewBundle, compatibleWith: nil))
        if #available(iOS 13.0, *) {
            searchBar.searchTextField.rightView = imageView
        } else {
            // Fallback on earlier versions
        }
        if #available(iOS 13.0, *) {
            searchBar.searchTextField.rightViewMode = UITextField.ViewMode.always
        } else {
            // Fallback on earlier versions
        }
        
        return searchBar
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.addSubview(self.searchBarF)
        collection.delegate = self
        collection.dataSource = self
        collection.register(UINib(nibName: "MiniChurchCellCVC", bundle: viewBundle), forCellWithReuseIdentifier: "cell")
        self.showLoading()
        self.presenter?.getChurches(name: "")
    }
    
    func mostrarMSG(dtcAlerta: [String : String]) {
        alert.dismiss(animated: false, completion: {
            let alerta = UIAlertController(title: dtcAlerta["titulo"], message: dtcAlerta["cuerpo"], preferredStyle: .alert)
            alerta.addAction(UIAlertAction(title: "Aceptar", style: .default, handler: nil))
            self.present(alerta, animated: true, completion: nil)
        })
    }
    
    func loadChurches(data: ChurchesMasses) {
        self.alert.dismiss(animated: false, completion: { [self] in
            print("OK")
            tableData = data
            tempTableData = data
            collection.reloadData()
        })
    }
    
    func showLoading(){
        let imageView = UIImageView(frame: CGRect(x: 75, y: 25, width: 140, height: 60))
        imageView.image = UIImage(named: "logoEncuentro", in: viewBundle, compatibleWith: nil)
        alert.view.addSubview(imageView)
        self.present(alert, animated: false, completion: nil)
    }
    
    @IBAction func close(_ sender: Any){
        self.navigationController?.popViewController(animated: true)
    }
    
}

extension MassesListViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return tempTableData.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cellData = tempTableData[indexPath.row]
        let cell = collection.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! MiniChurchCellCVC
        cell.lblTitle.text = cellData.name
        cell.imgView.image = UIImage(named: "church_icon", in: viewBundle, compatibleWith: nil)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (self.collection.bounds.width - 15.0), height: 80.0)
    }
}

extension MassesListViewController: UISearchBarDelegate{
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.view.endEditing(true)
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        tempTableData = tableData
        self.collection.reloadData()
        searchBar.text = ""
        self.view.endEditing(true)
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText.count == 0{
            tempTableData = tableData
        }else{
            tempTableData = tempTableData.filter({ $0.name.folding(options: .diacriticInsensitive, locale: .current).lowercased().contains(searchText.folding(options: .diacriticInsensitive, locale: .current).lowercased()) })
        }
        self.collection.reloadData()
    }
}
