//
//  OtherServicesInteractor.swift
//  EncuentroCatolicoServices
//
//  Created Desarrollo on 22/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class OtherServicesInteractor: OtherServicesInteractorProtocol {

    weak var presenter: OtherServicesPresenterProtocol?
    
    func requestServices(type: cases) {
        var requestType = ""
        switch type {
        case .Bendiciones:
            requestType = "BLESSING"
//        case .Celebraciones:
//            requestType = "CELEBRATION"
        case .OtrosServicios:
            requestType = "OTHERS"
        }
        
        guard let endpoint: URL = URL(string: "https://xmbcqr3wvd.execute-api.us-east-1.amazonaws.com/develop/catalog/services?type=\(requestType)") else {
            print("Error formando url")
            self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: [], type: .Bendiciones)
            return
        }
        
        var request = URLRequest(url: endpoint)
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        let tksession = UserDefaults.standard.string(forKey: "idToken")
        request.setValue("Bearer \( tksession ?? "")", forHTTPHeaderField: "Authorization")
        request.httpMethod = "GET"
        
        let tarea = URLSession.shared.dataTask(with: request) { data, response, error in
           // //print("->  respuesta Status Code: ", response as Any)
            //print("->  error: ", error as Any)
            if error != nil {
                print("Hubo un error")
                return
            }
            
            if (response as! HTTPURLResponse).statusCode == 200 {
                
                do {
                    let options = try JSONDecoder().decode([servicesSubOption].self, from: data!)
                    self.presenter?.getResponse(errores: ServerErrors.OK, data: options, type: type)
                } catch {
                    self.presenter?.getResponse(errores: ServerErrors.ErrorInterno, data: [], type: .Bendiciones)
                }
            } else {
                APIType.shared.refreshToken()
                self.presenter?.getResponse(errores: ServerErrors.ErrorServidor, data: [], type: .Bendiciones)
            }
        }
        tarea.resume()
        
    }
}
