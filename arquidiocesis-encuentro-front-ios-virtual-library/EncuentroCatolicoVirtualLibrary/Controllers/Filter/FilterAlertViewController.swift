//
//  FilterAlertViewController.swift
//  EncuentroCatolicoVirtualLibrary
//
//  Created Desarrollo on 16/04/21.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class FilterAlertViewController: UIViewController, FilterAlertViewProtocol {
    
    @IBOutlet weak var btnCleanFilters: UIButton!
    @IBOutlet weak var alertView             : UIView!
    @IBOutlet weak var selectOrderStack      : UIStackView!
    @IBOutlet weak var selectFilterStack     : UIStackView!
    @IBOutlet weak var btnFilterByThemeButton: UIButton!
    @IBOutlet weak var defaultOrderButton    : UIButton! 
    
    var presenter: FilterAlertPresenterProtocol?
    var filter: Filter = .none
    var order: Order = .recentToOlder
    let lineAtribbutes: [NSAttributedString.Key: Any] = [
          .font: UIFont.systemFont(ofSize: 15),
          .foregroundColor: UIColor.blue,
          .underlineStyle: NSUnderlineStyle.single.rawValue
      ]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let attributeLine = NSMutableAttributedString(string: "Limpiar filtro", attributes: lineAtribbutes
        )
        btnCleanFilters.setAttributedTitle(attributeLine, for: .normal)
        alertView.roundMultipleCorners([.layerMinXMinYCorner, .layerMaxXMinYCorner], radius: 15, borderColor: .white, borderWidth: 0.0)
    }
    
    func removeBottomFilter(){
        btnFilterByThemeButton.setImage(UIImage(named: "dot", in: Bundle.local, compatibleWith: nil), for: .normal)
        for element in selectFilterStack.subviews{
            if element is UIButton{
                let button = element as! UIButton
                button.setImage(UIImage(named: "dot", in: Bundle.local, compatibleWith: nil), for: .normal)
            }
        }
    }
    
    func removeTopFilter(){
        for element in selectOrderStack.subviews{
            if element is UIButton{
                let button = element as! UIButton
                button.setImage(UIImage(named: "dot", in: Bundle.local, compatibleWith: nil), for: .normal)
            }
        }
    }
    
    @IBAction func cleanFilter(_ sender: Any){
        filter = .none
        order = .recentToOlder
        removeTopFilter()
        removeBottomFilter()
        defaultOrderButton.setImage(UIImage(named: "dotFilled", in: Bundle.local, compatibleWith: nil), for: .normal)
        NotificationCenter.default.post(name: Notification.Name("changeFilter"), object: [self.filter:self.order])
    }
    
    @IBAction func selectOrderButtonClicked(_ sender: UIButton){
        removeTopFilter()
        sender.setImage(UIImage(named: "dotFilled", in: Bundle.local, compatibleWith: nil), for: .normal)
        switch sender.title(for: .normal) {
        case "Fecha mas reciente a mas antiguo":
            order = .recentToOlder
        case "Fecha mas antiguo a mas reciente":
            order = .olderToRecent
        case "Monto mayor a menor":
            order = .maxToMin
        case "Monto menor a mayor":
            order = .minToMax
        default:
            order = .recentToOlder
        }
        self.dismiss(animated: true, completion: {
            NotificationCenter.default.post(name: Notification.Name("changeFilter"), object: [self.filter:self.order])
        })
    }
    
    @IBAction func selectFilterButtonClicked(_ sender: UIButton){
        removeBottomFilter()
        sender.setImage(UIImage(named: "dotFilled", in: Bundle.local, compatibleWith: nil), for: .normal)
        switch sender.title(for: .normal) {
        case "Por tema":
            filter = .theme
        case "Niños (6 a 12 años)":
            filter = .kids
        case "Jóvenes (13 a 26 años)":
            filter = .young
        case "Adultos (27 años o más)":
            filter = .adult
        default:
            filter = .none
        }
        self.dismiss(animated: true, completion: {
            NotificationCenter.default.post(name: Notification.Name("changeFilter"), object: [self.filter:self.order])
        })
    }
    
    
}

public enum Filter {
    case theme
    case kids
    case young
    case adult
    case none
}

public enum Order{
    case recentToOlder
    case olderToRecent
    case minToMax
    case maxToMin
}

extension UIView {
    func roundMultipleCorners(_ corners: CACornerMask, radius: CGFloat, borderColor: UIColor, borderWidth: CGFloat) {
        self.layer.maskedCorners = corners
        self.layer.cornerRadius = radius
        self.layer.borderWidth = borderWidth
        self.layer.borderColor = borderColor.cgColor
    }
}
